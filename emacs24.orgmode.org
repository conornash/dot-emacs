* Helper Functions
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun org-babel-load-if-exists (org-file)
    (when (file-exists-p org-file)
      (org-babel-load-file org-file)))

  (defun insert-current-timestamp-inactive ()
    (interactive)
    (let ((current-prefix-arg '(16)))
      (org-time-stamp-inactive current-prefix-arg)))

  (defun caolan/repeated-string (n str)
    (string-join (make-list (+ n 1) "") str))

  (defun path-to-breadcrumbs (file basedir)
    (let ((dir (expand-file-name (file-name-directory file))))
      (if (and (string-equal dir (expand-file-name basedir))
               (string-equal (file-name-base file) "index"))
          ;; empty breadcrumbs to show we're at root index page
          nil
        (let* ((crumb-path (directory-file-name
                            (file-relative-name dir basedir)))
               (crumb-parts (remove-if
                             (lambda (x) (string-equal x "."))
                             (reverse (split-string crumb-path "/"))))
               (crumbs (and crumb-parts
                            (list (cons (car crumb-parts) "index.html")))))
          ;; parent directories
          (dotimes (i (length (cdr crumb-parts)))
            (setq crumbs
                  (cons (cons (nth i (cdr crumb-parts))
                              (concat (caolan/repeated-string (+ i 1) "../")
                                      "index.html"))
                        crumbs)))
          (setq crumbs
                (cons `("NBS" . ,(if (> (length crumb-parts) 0)
                                     (concat (caolan/repeated-string
                                              (length crumb-parts)
                                              "../")
                                             "index.html")
                                   "index.html"))
                      crumbs))
          (if (string-equal (file-name-base file) "index")
              (butlast crumbs)
            crumbs)))))

  (defun my-website-preamble (plist project-name)  
    (let* ((file (expand-file-name (plist-get plist :input-file)))
           (basedir (file-name-as-directory (plist-get plist :base-directory)))
           (crumbs (path-to-breadcrumbs file basedir))
           (date (org-publish-find-date file project-name)))
      (concat
       "<ol class=\"breadcrumbs\">"
       (if crumbs
           (mapconcat (lambda (crumb)
                        (concat "<li>"
                                "<a href=\"" (cdr crumb) "\">"
                                (car crumb)
                                "</a>"
                                "</li>"))
                      crumbs
                      "")
         "<li class=\"current\"><a href=\"index.html\">NBS</a></li>")
       "</ol>"
       (if date
           (concat "<div class=\"date\">"
                   (format-time-string "%d %b %Y" date)
                   "</div>")
         ""))))

  (defun endless/filter-timestamp (trans back _comm)
    "Remove <> around time-stamps."
    (pcase back
      ((or `jekyll `html)
       (progn
         (replace-regexp-in-string "&[lg]t;" "" trans)))
      (`latex
       (replace-regexp-in-string "[<>]" "" trans))))
#+END_SRC


* Load Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (package-install 'org-plus-contrib)
  (use-package org
    :mode ("\\.org$" . org-mode)
    :ensure org-plus-contrib
    :diminish
    ((org-src-mode . " ℹ")
     (org-indent-mode . " ⭾"))
    :bind (("<s-tab>" . org-force-cycle-archived)
	   ("<s-down>" . org-forward-element)
	   ("<s-up>" . org-backward-element)
	   ("<s-left>" . org-up-element)
	   ("<s-right>" . org-down-element)
	   ("M-<down>" . org-metadown)
	   ("M-<up>" . org-metaup)
	   ("C-c l" . org-store-link)
	   ("C-c C-l" . org-insert-link)
	   ("C-c C-x C-j" . org-clock-goto)
	   ("C-c C-x C-r" . org-clock-report)
	   ("s-!" . insert-current-timestamp-inactive)
	   ("s-o" . org-open-at-point)
	   ("s-O" . org-open-at-point-global))
    :chords
    (("qq" . org-capture)
     ("JJ" . org-agenda))
    :config
    (setq comment-start-skip "^\\s-*#\\(?: \\|$\\)"
	  ;; org-agenda-deadline-faces '((1.0 . '(:foreground "#cd4740"))
	  ;;                             (0.9 . '(:foreground "goldenrod1"))
	  ;;                             (0.0 . default))
	  org-agenda-dim-blocked-tasks t
	  org-agenda-start-with-follow-mode t
	  org-agenda-todo-ignore-scheduled nil
	  org-clock-out-remove-zero-time-clocks t
	  org-clock-persist 'history
	  org-confirm-babel-evaluate nil
	  org-deadline-warning-days 28
	  ;; We don't want to see days in the clock report
	  org-duration-format '((special . h:mm))
	  org-enforce-todo-dependencies t
	  org-fontify-whole-heading-line t
	  org-goto-interface 'outline-path-completion
	  org-hide-emphasis-markers t
	  org-image-actual-width 700
	  org-list-allow-alphabetical t
	  org-log-done t
	  ;; Timestamp of changes to deadline using C-c C-d/C-s
	  org-log-redeadline 'time
	  org-log-reschedule 'time
	  org-modules '()
	  org-outline-path-complete-in-steps nil
	  org-refile-targets '((org-agenda-files . (:maxlevel . 2))
			       (org-agenda-files . (:todo . "NEXTACTION"))
			       (nil . (:maxlevel . 2)))
	  org-refile-use-outline-path 'file
	  ;; In Sparse Trees, show the details below the matching entries
	  org-src-window-setup 'current-window
	  org-src-fontify-natively t
	  org-show-entry-below t        
	  org-table-last-column-widths '(95 7 5)
	  org-use-property-inheritance t        
	  org-use-speed-commands t
	  org-startup-with-inline-images t
	  org-speed-commands-user '(("S" . widen)
				    ("d" . org-deadline))        
	  ;; We don't want to see days in the clock report
	  org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)
	  ;; don't show scheduled tasks in the TODO view of the agenda
	  org-agenda-todo-ignore-scheduled nil))
  
  (require 'org-yt (expand-file-name "org-yt.el" "~/.emacs.d/"))
  
  (defun org-image-link (protocol link _description)
    "Interpret LINK as base64-encoded image data."
    (cl-assert (string-match "\\`img" protocol) nil
	       "Expected protocol type starting with img")
    (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
      (cl-assert buf nil
		 "Download of image \"%s\" failed." link)
      (with-current-buffer buf
	(goto-char (point-min))
	(re-search-forward "\r?\n\r?\n")
	(buffer-substring-no-properties (point) (point-max)))))
  
  (org-link-set-parameters
   "imghttp"
   :image-data-fun #'org-image-link)
  
  (org-link-set-parameters
   "imghttps"
   :image-data-fun #'org-image-link)
  
  (org-clock-persistence-insinuate)
  
  (add-hook 'org-mode-hook
	    #'(lambda ()
		(setq-local isearch-lazy-highlight nil)
		(org-defkey org-mode-map [remap forward-paragraph] 'forward-paragraph)
		(org-defkey org-mode-map [remap backward-paragraph] 'backward-paragraph)
		(define-key org-mode-map (kbd "C-z") 'yas/expand)
		(define-key org-mode-map (kbd "M-#") 'er/expand-region)
		(visual-line-mode 1)
		(delete '("\\.pdf\\'" . default) org-file-apps)
		;; PDF viewer
		(add-to-list 'org-file-apps '("\\.pdf\\'" . "open %s"))
		(add-to-list 'org-export-filter-timestamp-functions
			     #'endless/filter-timestamp)))
  
  (use-package orgalist)
  ;; (add-hook 'orgalist-mode-map
  ;;           #'(lambda ()
  ;;               (org-defkey org-mode-map [remap forward-paragraph] 'forward-paragraph)
  ;;               (org-defkey org-mode-map [remap backward-paragraph] 'backward-paragraph)
  ;;               ;; (define-key org-mode-map (kbd "<s-tab>") 'org-force-cycle-archived)
  ;;               ;; (define-key org-mode-map (kbd "<s-down>") 'org-forward-element)
  ;;               ;; (define-key org-mode-map (kbd "<s-up>") 'org-backward-element)
  ;;               ;; (define-key org-mode-map (kbd "<s-left>") 'org-up-element)
  ;;               ;; (define-key org-mode-map (kbd "<s-right>") 'org-down-element)
  ;;               ;; (define-key org-mode-map (kbd "M-<down>") 'org-metadown)
  ;;               ;; (define-key org-mode-map (kbd "M-<up>") 'org-metaup)
  ;;               (define-key org-mode-map (kbd "s-!") 'insert-current-timestamp-inactive)
  ;;               (define-key org-mode-map (kbd "C-z") 'yas/expand)
  ;;               (define-key org-mode-map (kbd "M-#") 'er/expand-region)
  ;;               (define-key org-mode-map (kbd "s-o") 'org-open-at-point-global)
  ;;               ;; (delete '("\\.pdf\\'" . default) org-file-apps)
  ;;               ;; PDF viewer
  ;;               ;; (add-to-list 'org-file-apps '("\\.pdf\\'" . "open %s"))
  ;;               ))
  
  (add-hook 'org-src-mode-hook
	    #'(lambda ()
		(helm-mode 1)
		(hack-dir-local-variables-non-file-buffer)))
  
  ;;
  ;; fix yasnippet conflict
  ;;(add-hook 'org-mode-hook
  ;;	  (lambda ()
  ;;	    (org-set-local 'yas/trigger-key [tab])
  ;;	    (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)
  ;;	    (define-key org-mode-map "\M-A" 'org-archive-to-archive-sibling)))
  
  ;; org export docbook
  (setq org-export-docbook-xslt-proc-command "xsltproc --output %o %s %i")
  (setq org-export-docbook-xslt-proc-command "")
  
  (eval-when-compile
    (defvar org-agenda-mode-map))
  
  (add-hook 'org-agenda-mode-hook
	    #'(lambda ()
		(define-key org-agenda-mode-map (kbd ">") 'org-agenda-remove-restriction-lock)
		(define-key org-agenda-mode-map (kbd "M") 'org-google-calendar-sync)))
  
  
  ;;  ;; Sacha Chua's clock-in-and-mark-task-started-at-the-same-time code
  ;;  (eval-after-load 'org
  ;;    '(progn
  ;;       (defun wicked/org-clock-in-if-starting ()
  ;;         "Clock in when the task is marked STARTED."
  ;;         (when (and (string= state "STARTED")
  ;;                 (not (string= last-state state)))
  ;;        (org-clock-in)))
  ;;       (add-hook 'org-after-todo-state-change-hook
  ;;              'wicked/org-clock-in-if-starting)
  ;;       (defadvice org-clock-in (after wicked activate)
  ;;         "Set this task's status to 'STARTED'."
  ;;         (org-todo "STARTED"))
  ;;       (defun wicked/org-clock-out-if-waiting ()
  ;;         "Clock out when the task is marked SCHEDULED."
  ;;         (when (and (string= state "SCHEDULED")
  ;;                 (equal (marker-buffer org-clock-marker) (current-buffer))
  ;;                 (< (point) org-clock-marker)
  ;;                 (> (save-excursion (outline-next-heading) (point))
  ;;                    org-clock-marker)
  ;;                 (not (string= last-state state)))
  ;;        (org-clock-out)))
  ;;       (add-hook 'org-after-todo-state-change-hook
  ;;              'wicked/org-clock-out-if-waiting)))
  
  ;; Import Org-Mobile changes
  ;;(org-mobile-pull)
  
  ;; Recalculate the agenda every 5 seconds when idle
  ;; (run-with-idle-timer 5 nil (lambda () (org-agenda-list) (delete-window)))
  
  ;; org-mode HTML export
  ;; (setq org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/msnyder.css\">")
  
  (use-package htmlize)
  (use-package org-protocol :ensure nil)
  (use-package ox-md :ensure nil)
  (use-package ox-publish :ensure nil)
  (use-package ox-taskjuggler :ensure nil)
  (use-package ox-freemind :ensure nil)
  (use-package ox-icalendar :ensure nil)
  
  (use-package ox-reveal
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
  
  (setq
   org-agenda-exporter-settings '((ps-number-of-columns 2)
				  (ps-landscape-mode t)
				  (org-agenda-add-entry-text-maxlines 5)
				  (htmlize-output-type 'css)))
  
  ;; Properties drawers are now required to be located right after a headline and its planning line, when applicable.
  ;; It will break some documents as TODO states changes were sometimes logged before the property drawer.
  ;; The following function will repair them:
  (defun org-repair-property-drawers ()
    "Fix properties drawers in current buffer.
   Ignore non Org buffers."
    (when (eq major-mode 'org-mode)
      (org-with-wide-buffer
       (goto-char (point-min))
       (let ((case-fold-search t)
	     (inline-re (and (featurep 'org-inlinetask)
			     (concat (org-inlinetask-outline-regexp)
				     "END[ \t]*$"))))
	 (org-map-entries
	  (lambda ()
	    (unless (and inline-re (org-looking-at-p inline-re))
	      (save-excursion
		(let ((end (save-excursion (outline-next-heading) (point))))
		  (forward-line)
		  (when (org-looking-at-p org-planning-line-re) (forward-line))
		  (when (and (< (point) end)
			     (not (org-looking-at-p org-property-drawer-re))
			     (save-excursion
			       (and (re-search-forward org-property-drawer-re end t)
				    (eq (org-element-type
					 (save-match-data (org-element-at-point)))
					'drawer))))
		    (insert (delete-and-extract-region
			     (match-beginning 0)
			     (min (1+ (match-end 0)) end)))
		    (unless (bolp) (insert "\n"))))))))))))
#+END_SRC



* Org Babel
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ob-async)
  (use-package ob-sql-mode)
  (use-package restclient)
  (use-package ob-restclient
    :after restclient)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R          . t)   
     (emacs-lisp . t)   
     (js         . t)
     (restclient . t)
     (lisp       . t)
     (plantuml   . t)
     (python     . t)
     (shell      . t)
     (sql        . t)
     (sql-mode   . t)))

  ;; (org-babel-lob-ingest "~/Dropbox/emacs/emacs24/elisp/emacs24.Babel.org")

  (setq org-structure-template-alist '(("a" . "export ascii")
		       ("c" . "center")
		       ("C" . "comment")
		       ("e" . "example")
		       ("E" . "export")
		       ("h" . "export html")
		       ("l" . "export latex")
		       ("q" . "quote")
		       ("s" . "src")
		       ("v" . "verse")))
  ;; (add-to-list 'org-structure-template-alist '("el" . "#+BEGIN_SRC emacs-lisp :tangle yes :eval never\n ?\n#+END_SRC"))
  ;; (add-to-list 'org-structure-template-alist '("py" . "#+BEGIN_SRC python :results output :exports both :prologue (progn (setenv \"PYENV_VERSION\" \"scheduler-as-a-service-3.6.1\") \"\") :eval never\n ?\n#+END_SRC"))
  ;; (add-to-list 'org-structure-template-alist '("rana" . "#+BEGIN_SRC R :results output :exports both :cache yes :eval never\n  library(nbs.analysis)\n  ?\n#+END_SRC"))

  (setq org-babel-R-command "/usr/local/bin/R --slave --no-save"
    org-html-keep-old-src t
    org-babel-default-inline-header-args '((:session . "none")
			   (:cache . "yes")
			   (:eval . "never")
			   (:exports . "both")
			   (:tangle . "yes"))
    org-babel-default-header-args '((:session . "none")
		    (:cache . "yes")
		    (:eval . "never")
		    (:exports . "both")
		    (:tangle . "yes")))


#+END_SRC
