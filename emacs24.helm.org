* Helper functions
#+BEGIN_SRC emacs-lisp :tangle yes

  (defun conor-helm-files ()
    "Helm function to open files or buffers"
    (interactive)
    (unless helm-source-buffers-list
      (setq helm-source-buffers-list
        (helm-make-source "Buffers" 'helm-source-buffers)))
    (let ((helm-ff-transformer-show-only-basename nil)
      (helm-search-all-files (cl-case (window-system)
                   ('ns helm-source-mac-spotlight)
                   (nil helm-source-locate)
                   (t helm-source-locate))))
      (helm :sources '(helm-source-buffers-list
               helm-source-recentf
               helm-search-all-files
               helm-source-bookmarks
               helm-source-files-in-current-dir
               helm-source-buffer-not-found)
        :buffer "*Where would you like to go?*")))

  (defun conor-helm-insert ()
    "Helm function to insert text in a buffer"
    (interactive)
    (helm-register-candidates)
    (helm-kill-ring-candidates)
    (helm :sources '(helm-source-register
             helm-source-kill-ring)
      :buffer "*helm insert*"))

  (defun conor-helm-project ()
    "Helm function to work with projects"
    (interactive)
    (helm :sources '(helm-source-projectile-buffers-list
             helm-source-projectile-files-list
             helm-source-projectile-projects)
      :buffer "*helm project*"))

  (defun conor-helm-kill-ring-regsters ()
    (interactive)
    (helm :sources '(helm-source-kill-ring
             helm-source-register)
      :buffer "*helm kill ring & registers"))

  (defun conor-helm-ag-here ()
    (interactive)
    (helm-do-ag default-directory))

#+END_SRC



* Helm
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :straight t
    :commands (helm-mode helm-apropos conor-helm-files conor-helm-ag-here)
    :bind
    (("<f1>" . helm-M-x)
     ("<C-f1>" . helm-command-prefix)
     ("<f2>" . helm-command-prefix)
     ("<f9>" . conor-helm-files)
     ("<C-f9>" . helm-find-files)
     ("<M-f1>" . helm-apropos)
     ("<C-f8>" . helm-global-mark-ring)
     ("C-M-y" . conor-helm-kill-ring-regsters))
    :chords
    (("HH" . helm-apropos)
     ("hh" . helm-M-x)
     ("jj" . conor-helm-files))
    :diminish (helm-mode . " âŽˆ")
    :config
    (setq
     helm-boring-buffer-regexp-list nil
     helm-buffer-max-length 40
     helm-exit-idle-delay 0 ;; update fast sources immediately (doesn't).
     helm-input-idle-delay 0.1  ;; this actually updates things relatively quickly.
     helm-multi-swoop-ignore-buffers-match "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
     ;; open helm buffer inside current window, not occupy whole other window
     helm-split-window-inside-p 1
     ;; move to end or beginning of source when reaching top or bottom of source.
     helm-move-to-line-cycle-in-source nil
     ;; search for library in `require' and `declare-function' sexp.
     helm-ff-search-library-in-sexp t
     ;; scroll 8 lines other window using M-<next>/M-<prior>
     helm-echo-input-in-header-line t
     helm-ff-file-name-history-use-recentf t
     helm-ff-transformer-show-only-basename nil
     helm-follow-mode t
     helm-org-show-filename t
     helm-scroll-amount 8)

    (helm-autoresize-mode 0)

    ;; (add-hook 'helm-cleanup-hook
    ;;           #'(lambda ()
    ;;               (setq gc-cons-percentage 0.2)))
    ;; (add-hook 'helm-before-initialize-hook
    ;;           #'(lambda ()
    ;;               (setq gc-cons-percentage 0.8)))
    )

  (use-package helm-config :straight nil :ensure nil)
  (use-package helm-ring :straight nil :ensure nil)
  (use-package helm-x-files :straight nil :ensure nil)
  (use-package helm-for-files
    :ensure nil
    :straight nil
    :defines helm-source-mac-spotlight
    :init
    (unless helm-source-buffers-list
      (setq helm-source-buffers-list (helm-make-source "Buffers" 'helm-source-buffers)
            helm-for-files-preferred-list
            '(helm-source-buffers-list
              helm-source-recentf
              helm-source-bookmarks
              helm-source-file-cache
              helm-source-files-in-current-dir
              helm-source-mac-spotlight))))

  (global-set-key [remap apropos-command] 'helm-apropos)

  (use-package helm-swoop
    :bind
    (("M-o" . helm-swoop)
     ("<C-M-f12>" . helm-multi-swoop-org)
     ("<C-M-f10>" . helm-multi-swoop)
     ("<M-f10>" . helm-multi-swoop-all)))

  (use-package helm-dash
    :bind (("C-c C-d" . helm-dash-at-point))
    :config
    (setq helm-dash-browser-func 'eww
      helm-dash-docsets-path "~/dotfiles/.docsets"
      helm-dash-common-docsets '( "AWS_Redshift_SQL_Reference" "Airflow" "BigQuery_Standard_SQL"
                      "Flask" "Jinja" "MySQL" "Org_Mode" "Pandas"
                      "PostgreSQL" "Python 3" "R" "Requests" "SQLAlchemy"
                      "SQLite" "boto3" "ggplot2" "ms-sql" "postgis"))
    )

  (use-package helm-pydoc)

  (use-package helm-ag
    :ensure-system-package (ag . the_silver_searcher)
    :bind
    (("<f10>" . conor-helm-ag-here))
    :config
    (setq helm-ag-base-command "ag -U -z --hidden --nocolor --nogroup --path-to-ignore=~/.agignore "))

  (use-package helm-rg
    :ensure-system-package rg
    :bind
    (("<C-f10>" . helm-rg))
    :config
    (setq helm-rg-default-extra-args "-z"))

  (use-package helm-unicode
    :bind (("C-x 8 RET" . helm-unicode)))

#+END_SRC
