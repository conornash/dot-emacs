* Helper functions
  #+BEGIN_SRC emacs-lisp :tangle yes
    (defun display-python-instance ()
      "Display the currently running Python instance in another window"
      (interactive)
      (if (eq (python-shell-get-buffer) nil)
          (python-shell-get-or-create-process)
        (display-buffer (python-shell-get-buffer) t)))

    (defun my-python-eval-line (vis)
      "Send the current line to the inferior ESS process.
    Arg has same meaning as for `ess-eval-region'."
      (interactive "P")
      (save-excursion
        (end-of-line)
        (let ((end (point)))
          (beginning-of-line)
          (princ (concat "Loading line:...") t)
          (conor-python-shell-send-region (point) end))))


    (defun python-shell-send-line (&optional arg)
      "This function will send the line that the point is on to the active python interpreter."
      (interactive "p")
      (save-excursion (move-beginning-of-line arg)
                      (setq start (point))
                      (move-end-of-line arg)
                      (setq end (point))
                      (python-shell-send-region start end)))



    (defun python-shell-send-block (&optional arg)
      (interactive "p")
      (save-excursion (backward-paragraph)
                      (setq start (point))
                      (forward-paragraph)
                      (setq end (point))
                      (python-shell-send-region start end)))

    (fset 'descend-python-dict "\M-b\M-f\C-f\C-f\['")


    (defun conor-python-shell-send-string (string &optional process msg)
      "Send STRING to inferior Python PROCESS.
    When MSG is non-nil messages the first line of STRING."
      (interactive "sPython command: ")
      (let ((process (or process (python-shell-get-or-create-process)))
            (lines (split-string string "\n" t)))
        (when msg
          (message (format "Sent: %s..." (nth 0 lines))))
        (if (> (length lines) 1)
            (let* ((temp-file-name (make-temp-file "py"))
                   (file-name (or (buffer-file-name) temp-file-name)))
              (with-temp-file temp-file-name
                (insert string)
                (delete-trailing-whitespace))
              (python-shell-send-file file-name process temp-file-name))
          (comint-send-string process string)
          (when (or (not (string-match "\n$" string))
                    (string-match "\n[ \t].*\n?$" string))
            (comint-send-string process "\n")))))

    (defun conor-python-shell-send-region (start end)
      "Send the region delimited by START and END to inferior Python process."
      (interactive "r")
      (let ((deactivate-mark nil))
        (conor-python-shell-send-string (buffer-substring start end) nil t)))

    (defun my-add-to-multiple-hooks (func hooks)
      (mapc (lambda (hook)
              (add-hook hook func))
            hooks))

    ;; Allow shims to work
    (add-to-list 'exec-path "/Users/conornash/.pyenv/shims/" t)
  #+END_SRC



* Python Mode
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package pyenv-mode)
    (use-package pyenv-mode-auto)
    (use-package py-isort)
    ;; (use-package anaconda-mode)
    (define-key pyenv-mode-map (kbd "C-c C-s") nil)
    (define-key pyenv-mode-map (kbd "C-c s") 'pyenv-mode-set)
    (setq-default tab-width 4
                  lsp-prefer-flymake nil
                  python-indent-offset 4
                  python-shell-interpreter "ipython"
                  python-shell-interpreter-args "--simple-prompt -i --"
                  python-shell-prompt-detect-failure-warning t
                  python-shell-completion-native t
                  python-shell-prompt-regexp "In \\[[0-9]+\\]: "
                  python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
                  python-shell-completion-native-disabled-interpreters '("pypy" "ipython" "jupyter")
                  ;; I don't know if this is kind of hacky since we can't control it on other systems.
                  python-shell-process-environment
                  '("PYTHONIOENCODING='utf-8'"
                    "LANG=en_US.UTF-8"
                    "LC_ALL=en_US.UTF-8"
                    "LC_LANG=en_US.UTF-8"))


    (use-package python-pytest
      :bind
      (:map python-mode-map
            ("C-c t" . python-pytest-popup)))

    (add-hook 'python-mode-hook
              #'(lambda ()
                     (pyenv-mode 1)
                     (rainbow-delimiters-mode 1)
                     (rainbow-mode 1)
                     (smartscan-mode 1)
                     (turn-on-smartparens-strict-mode)

                     ;; (anaconda-mode 1)
                     (lsp)

                     (flycheck-mode 1)
                     (flymake-mode 0)
                     ;; (flycheck-add-next-checker 'python-flake8 'python-pylint)
                     ;; (flycheck-add-next-checker 'python-pylint 'python-pycompile)
                     ;; (flycheck-add-next-checker 'python-pycompile 'python-mypy)
                     (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)

                     (guide-key/add-local-guide-key-sequence "C-c")

                     (define-key python-mode-map (kbd "<M-up>") 'move-text-up)
                     (define-key python-mode-map (kbd "<M-down>") 'move-text-down)

                     (define-key python-mode-map (kbd "M-\\") 'display-python-instance)
                     (define-key python-mode-map (kbd "C-|") 'eval-at-cursor)
                     (define-key python-mode-map (kbd "C-\\") 'my-python-eval-line)

                     (define-key python-mode-map (kbd "C-S-a") 'python-nav-beginning-of-statement)
                     (define-key python-mode-map (kbd "C-a") 'beginning-of-visual-line)
                     (define-key python-mode-map (kbd "C-S-e") 'python-nav-end-of-statement)
                     (define-key python-mode-map (kbd "C-e") 'end-of-visual-line)

                     (local-unset-key (kbd "C-c C-d"))

                     (define-key python-mode-map (kbd "C-c C-r") 'conor-python-shell-send-region)

                     (define-key python-mode-map (kbd "M-.") 'lsp-find-definition)
                     (define-key python-mode-map (kbd "s-.") 'lsp-find-references)
                     ))

    (use-package lsp-python-ms
      :init (setq lsp-python-ms-auto-install-server t)
      :commands lsp)
  #+END_SRC
