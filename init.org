#+LAST_MOBILE_CHANGE: 2013-02-23 12:26:49
#+TITLE: Conor's Dot Emacs
#+COLUMNS: %50ITEM(Task) %13CLOCKSUM(Clocked Total) %8Effort(Estimate){:} %13CLOCKSUM_T(Clocked Today) %18DEADLINE
#+STARTUP: hidestars indent
#+PROPERTY: Effort_ALL 0 0:05 0:15 0:30 1:00 2:00 5:00 10:00 20:00
#+PROPERTY: ORDERED t
#+SEQ_TODO: NEXTACTION(@) | DONE(@) TRANSFERRED(@) CANCELLED(@)
#+PRIORITIES: A E A
#+DRAWERS: PROPERTIES ARCHIVE
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=blue, urlcolor=blue}
#+SETUPFILE: theme-readtheorg.setup


* Setup system
** Initial requirements
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; (setq gc-cons-percentage (expt 10 -4)
  ;;       gc-cons-threshold (expt 2 22))


  (setq enable-recursive-minibuffers t
        inhibit-startup-screen t
        load-prefer-newer t
        max-lisp-eval-depth 30000
        ring-bell-function 'ignore
        save-interprogram-paste-before-kill t)


  (pcase (window-system)
    ('x
     (setq x-meta-keysym 'ctrl
           x-alt-keysym  'meta
           x-ctrl-keysym 'super)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (tool-bar-mode -1))
    ('ns
     (eval-when-compile
       (defvar x-alt-keysym)
       (defvar x-ctrl-keysym)
       (defvar x-meta-keysym)
       )
     (setq mac-command-modifier 'control
           mac-control-modifier 'super
           mac-option-modifier 'meta)
     (scroll-bar-mode -1)
     (tool-bar-mode -1))
    (_
     (menu-bar-mode -1)
     (tool-bar-mode -1)))

  ;; Don't say yes or no, just y or n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; ;; Coding system
  ;; (prefer-coding-system 'utf-8)
  ;; (set-default-coding-systems 'utf-8)
  ;; (set-terminal-coding-system 'utf-8)
  ;; (set-keyboard-coding-system 'utf-8)
  ;; ;; Unicode coding
  ;; (set-language-environment "UTF-8")

  ;; (set-face-attribute 'default nil
  ;;                     :height 150)


#+END_SRC


** Package Management
#+begin_src emacs-lisp :tangle yes
  ;; (add-to-list 'load-path "/Users/conornash/.emacs.d/straight/build/org")
  ;; (require 'org "/Users/conornash/.emacs.d/straight/build/org/org.el")
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t
        use-package-always-ensure t
        use-package-compute-statistics t
        use-package-verbose t)

  (eval-when-compile
    (require 'use-package)
    (require 'straight))
  (require 'files)

  (use-package bind-key)
  (use-package diminish)

  ;; (straight-use-package 'org)
  ;; (use-package use-package-ensure-system-package)
  (use-package use-package-chords
    :config (key-chord-mode 1))
  (straight-use-package 'project)
#+end_src


** Environment Variables
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Pull in environment variables
  ;; (defvar exec-path-from-shell-warn-duration-millis)
  (use-package exec-path-from-shell)
  (exec-path-from-shell-initialize)

  ;; To allow Python to be in UTF-8
  ;; (defvar universal-coding-system-env-list '("PYTHONIOENCODING")
  ;;   "List of environment variables \\[universal-coding-system-argument] should set")

  ;; (defadvice universal-coding-system-argument (around provide-env-handler activate)
  ;;   "Augments \\[universal-coding-system-argument] so it also sets environment variables

  ;; Naively sets all environment variables specified in
  ;; `universal-coding-system-env-list' to the literal string
  ;; representation of the argument `coding-system'.

  ;; No guarantees are made that the environment variables set by this advice support
  ;; the same coding systems as Emacs."
  ;;   (let ((process-environment (copy-alist process-environment)))
  ;;     (dolist (extra-env universal-coding-system-env-list)
  ;;       (setenv extra-env (symbol-name (ad-get-arg 0))))
  ;;     ad-do-it))

  ;; (setenv "LC_ALL" "en_US.UTF-8")
  ;; (setenv "LANG" "en_US.UTF-8")


#+END_SRC


** Async compilation
#+begin_src emacs-lisp :tangle yes
  ;; (use-package emacs-async
  ;;   :straight (:host github :repo "jwiegley/emacs-async")
  ;;   :config
  ;;   (async-bytecomp-package-mode 1))

#+end_src



** Safe variables
#+begin_src emacs-lisp :tangle yes
  ;; allow remembering risky variables
  (advice-add 'risky-local-variable-p :override #'ignore)
  (setq enable-remote-dir-locals t)
  ;; Above can be removed with advice-remove

#+end_src


** Backwards compatibility
#+begin_src emacs-lisp :tangle yes
(use-package compat
  :straight (:host github :repo "emacs-compat/compat"))

#+end_src


** Remove keybindings
#+begin_src emacs-lisp :tangle yes
  (global-unset-key (kbd "s-l"))
  (global-unset-key (kbd "s-n"))
  (global-unset-key (kbd "s-o"))
  (global-unset-key (kbd "s-p"))
  (global-unset-key (kbd "s-q"))
  (global-unset-key (kbd "s-u"))
  (global-unset-key (kbd "M-s-["))


#+end_src

* Calendar
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq calendar-latitude 38.6
  ;;       calendar-longitude -90.1
  ;;       calendar-location-name "St. Louis")
  (setq calendar-latitude 51.46
        calendar-longitude 0.3
        calendar-location-name "Richmond, London")

 #+END_SRC


* Org Mode
** Get Org version
  For straight.el
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (require 'subr-x)
  ;; (straight-use-package 'git)

  ;; (defun org-git-version ()
  ;;   "The Git version of org-mode.
  ;; Inserted by installing org-mode or when a release is made."
  ;;   (require 'git)
  ;;   (let ((git-repo (expand-file-name
  ;;                    "straight/repos/org/" user-emacs-directory)))
  ;;     (string-trim
  ;;      (git-run "describe"
  ;;               "--match=release\*"
  ;;               "--abbrev=6"
  ;;               "HEAD"))))

  ;; (defun org-release ()
  ;;   "The release version of org-mode.
  ;; Inserted by installing org-mode or when a release is made."
  ;;   (require 'git)
  ;;   (let ((git-repo (expand-file-name
  ;;                    "straight/repos/org/" user-emacs-directory)))
  ;;     (string-trim
  ;;      (string-remove-prefix
  ;;       "release_"
  ;;       (git-run "describe"
  ;;                "--match=release\*"
  ;;                "--abbrev=0"
  ;;                "HEAD")))))

#+END_SRC



** Helper Functions
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun org-babel-load-if-exists (org-file)
    (when (file-exists-p org-file)
      (org-babel-load-file org-file)))

  (defun insert-current-timestamp-inactive ()
    (interactive)
    (let ((current-prefix-arg '(16)))
      (org-time-stamp-inactive current-prefix-arg)))

  ;; (defun caolan/repeated-string (n str)
  ;;   (string-join (make-list (+ n 1) "") str))

  ;; (defun path-to-breadcrumbs (file basedir)
  ;;   (let ((dir (expand-file-name (file-name-directory file))))
  ;;     (if (and (string-equal dir (expand-file-name basedir))
  ;;              (string-equal (file-name-base file) "index"))
  ;;         ;; empty breadcrumbs to show we're at root index page
  ;;         nil
  ;;       (let* ((crumb-path (directory-file-name
  ;;                           (file-relative-name dir basedir)))
  ;;              (crumb-parts (cl-remove-if
  ;;                            (lambda (x) (string-equal x "."))
  ;;                            (reverse (split-string crumb-path "/"))))
  ;;              (crumbs (and crumb-parts
  ;;                           (list (cons (car crumb-parts) "index.html")))))
  ;;         ;; parent directories
  ;;         (dotimes (i (length (cdr crumb-parts)))
  ;;           (setq crumbs
  ;;                 (cons (cons (nth i (cdr crumb-parts))
  ;;                             (concat (caolan/repeated-string (+ i 1) "../")
  ;;                                     "index.html"))
  ;;                       crumbs)))
  ;;         (setq crumbs
  ;;               (cons `("NBS" . ,(if (> (length crumb-parts) 0)
  ;;                                    (concat (caolan/repeated-string
  ;;                                             (length crumb-parts)
  ;;                                             "../")
  ;;                                            "index.html")
  ;;                                  "index.html"))
  ;;                     crumbs))
  ;;         (if (string-equal (file-name-base file) "index")
  ;;             (butlast crumbs)
  ;;           crumbs)))))

  ;; (defun my-website-preamble (plist project-name)
  ;;   (let* ((file (expand-file-name (plist-get plist :input-file)))
  ;;          (basedir (file-name-as-directory (plist-get plist :base-directory)))
  ;;          (crumbs (path-to-breadcrumbs file basedir))
  ;;          (date (org-publish-find-date file project-name)))
  ;;     (concat
  ;;      "<ol class=\"breadcrumbs\">"
  ;;      (if crumbs
  ;;          (mapconcat (lambda (crumb)
  ;;                       (concat "<li>"
  ;;                               "<a href=\"" (cdr crumb) "\">"
  ;;                               (car crumb)
  ;;                               "</a>"
  ;;                               "</li>"))
  ;;                     crumbs
  ;;                     "")
  ;;        "<li class=\"current\"><a href=\"index.html\">NBS</a></li>")
  ;;      "</ol>"
  ;;      (if date
  ;;          (concat "<div class=\"date\">"
  ;;                  (format-time-string "%d %b %Y" date)
  ;;                  "</div>")
  ;;        ""))))

  ;; (defun endless/filter-timestamp (trans back _comm)
  ;;   "Remove <> around time-stamps."
  ;;   (pcase back
  ;;     ((or `jekyll `html)
  ;;      (progn
  ;;        (replace-regexp-in-string "&[lg]t;" "" trans)))
  ;;     (`latex
  ;;      (replace-regexp-in-string "[<>]" "" trans))))
#+END_SRC



** Load Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'seq)
  ;; (require 's.el "/Users/conornash/.emacs.d/straight/build/s/s.el")
  ;; (setq load-path (seq-filter #'(lambda (x) (and (not (string-equal "/Applications/Emacs.app/Contents/Resources/lisp/org" x))
  ;;                                                (not (string-equal "/Applications/Emacs.app/Contents/Resources/lisp/use-package" x)))) load-path))
  (use-package verb)
  (require 'org)
  ;; (use-package org
  ;;   :mode ("\\.org$" . org-mode)
  ;;   :diminish
  ;;   ((org-src-mode . " ℹ")
  ;;    (org-indent-mode . " ⭾"))
  ;;   :bind (("<s-tab>" . org-cycle-force-archived)
  ;;          ("<s-down>" . org-forward-element)
  ;;          ("<s-up>" . org-backward-element)
  ;;          ("<s-left>" . org-up-element)
  ;;          ("<s-right>" . org-down-element)
  ;;          ("M-<down>" . org-metadown)
  ;;          ("M-<up>" . org-metaup)
  ;;          ("C-c l" . org-store-link)
  ;;          ("C-c C-l" . org-insert-link)
  ;;          ("C-c C-x C-j" . org-clock-goto)
  ;;          ("C-c C-x C-r" . org-clock-report)
  ;;          ("s-!" . insert-current-timestamp-inactive)
  ;;          ("s-o" . org-open-at-point)
  ;;          ("s-O" . org-open-at-point-global))
  ;;   :chords
  ;;   (("qq" . org-capture)
  ;;    ("JJ" . org-agenda)))
  (key-chord-define-global "qq" 'org-capture)
  (key-chord-define-global "JJ" 'org-agenda)

    (org-clock-persistence-insinuate)
    (setq comment-start-skip "^\\s-*#\\(?: \\|$\\)"
          org-agenda-dim-blocked-tasks t
          org-agenda-start-with-follow-mode t
          org-agenda-todo-ignore-scheduled nil
          org-clock-out-remove-zero-time-clocks t
          org-clock-persist 'history
          org-confirm-babel-evaluate nil
          org-deadline-warning-days 28
          ;; We don't want to see days in the clock report
          org-duration-format '((special . h:mm))
          org-enforce-todo-dependencies t
          org-fontify-whole-heading-line t
          org-goto-interface 'outline-path-completion
          org-hide-emphasis-markers t
          org-image-actual-width 700
          org-list-allow-alphabetical t
          org-log-done t
          ;; Timestamp of changes to deadline using C-c C-d/C-s
          org-log-redeadline 'time
          org-log-reschedule 'time
          org-outline-path-complete-in-steps nil
          org-refile-targets '((org-agenda-files . (:maxlevel . 2))
                               (org-agenda-files . (:todo . "NEXTACTION"))
                               (nil . (:maxlevel . 2)))
          org-refile-use-outline-path 'file
          ;; In Sparse Trees, show the details below the matching entries
          org-src-window-setup 'current-window
          org-src-fontify-natively t
          org-show-entry-below t
          org-table-last-column-widths '(95 7 5)
          org-use-property-inheritance t
          org-use-speed-commands t
          org-speed-commands (nconc org-speed-commands
                                    '(("User commands") ("S" . widen) ("d" . org-deadline)))
          org-startup-with-inline-images t
          ;; don't show scheduled tasks in the TODO view of the agenda
          org-agenda-todo-ignore-scheduled nil)
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map)

#+END_SRC



** Org Packages
#+begin_src emacs-lisp :tangle yes
  (defun org-image-link (protocol link _description)
    "Interpret LINK as base64-encoded image data."
    (cl-assert (string-match "\\`img" protocol) nil
               "Expected protocol type starting with img")
    (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
      (cl-assert buf nil
                 "Download of image \"%s\" failed." link)
      (with-current-buffer buf
        (goto-char (point-min))
        (re-search-forward "\r?\n\r?\n")
        (buffer-substring-no-properties (point) (point-max)))))

  (use-package orgalist)

  (add-hook 'org-src-mode-hook
            #'(lambda ()
                (hack-dir-local-variables-non-file-buffer)))

  (eval-when-compile
    (defvar org-agenda-mode-map))

  (add-hook 'org-agenda-mode-hook
            #'(lambda ()
                (define-key org-agenda-mode-map (kbd ">") 'org-agenda-remove-restriction-lock)))

  (use-package htmlize)
  (require 'ox-md)
  ;; (use-package ox-reveal
  ;;   :custom
  ;;   (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

  (setq
   org-agenda-exporter-settings '((ps-number-of-columns 2)
                                  (ps-landscape-mode t)
                                  (org-agenda-add-entry-text-maxlines 5)
                                  (htmlize-output-type 'css)))

  (use-package verb
    :config (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
#+end_src


** Org Babel
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package ob-async)
  ;; (use-package ob-sql-mode)
  (use-package restclient)

  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((R          . t)
  ;;    (emacs-lisp . t)
  ;;    (js         . t)
  ;;    (lisp       . t)
  ;;    (plantuml   . t)
  ;;    (python     . t)
  ;;    (shell      . t)
  ;;    (sql        . t)
  ;;    (sql-mode   . t)))

  (add-to-list 'org-structure-template-alist
               '("G" . "src chatgpt-shell"))
  (add-to-list 'org-structure-template-alist
               '("M" . "src markdown"))
#+END_SRC


* Helm
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-file (expand-file-name "emacs24.helm.org" user-emacs-directory))
 #+END_SRC


* Used in language major modes

** Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes

  (org-babel-load-file (expand-file-name "emacs24.smartparens.org" user-emacs-directory))

 #+END_SRC


** Origami
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package origami
     :functions
     origami-yaml-parser
     yaml-subparser
     :bind
     (("C-M-n" . origami-next-fold)
      ("C-M-p" . origami-previous-fold)
      ("C-M-b" . origami-backward-fold-same-level)
      ("C-M-f" . origami-forward-fold-same-level)))

   (defun origami-yaml-parser (create)
       (lambda (content)
         (with-temp-buffer
           (defun yaml-subparser (beg end)
             "find all fold block between beg and end."
             (goto-char beg)
             (let (acc)
               ;; iterate all same level children.
               (while (and (beginning-of-defun -1) (<= (point) end)) ;; have children between beg and end?
                 (let* ((new-beg (point))
                        (new-offset (progn (search-forward-regexp ":" nil t) (- (point) new-beg)))
                        (new-end (progn (end-of-defun) (point))))
                   (setq acc (cons (funcall create new-beg new-end new-offset
                                            (yaml-subparser new-beg new-end))
                                   acc))
                   (goto-char new-end)))
               acc))
           (insert content)
           (yaml-subparser (point-min) (point-max)))))
 #+END_SRC

** Smartscan
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package smartscan)
#+END_SRC


* LLMs
 #+BEGIN_SRC emacs-lisp :tangle yes
   (org-babel-load-file (expand-file-name "emacs29.llm.org" user-emacs-directory))
#+END_SRC

* Hacky scripts
 #+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-if-exists (expand-file-name "emacs24.hacky.org" user-emacs-directory))
#+END_SRC


* Other Packages

** Auto-compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-compile
    :config
    (auto-compile-on-load-mode 1)
    (auto-compile-on-save-mode 1))

 #+END_SRC


** Auto-revert
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package autorevert
    :diminish (auto-revert-mode . " ⎌"))

  (global-auto-revert-mode t)
  (setq auto-revert-interval 5
        ;; Also auto refresh dired, but be quiet about it
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)


 #+END_SRC




** Backup each save
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun backup-each-save-filter (filename)
    (let ((ignored-filenames
           '("^/tmp" "semantic.cache$" "\\sv$"  "\\.emacs-places$" "\\.gpg$"
             "\\.recentf$" ".newsrc\\(\\.eld\\)?"))
          (matched-ignored-filename nil))
      (mapc
       (lambda (x)
         (when (string-match x filename)
           (setq matched-ignored-filename t)))
       ignored-filenames)
      (not matched-ignored-filename)))

  (use-package backup-each-save
    :config
    (setq backup-each-save-remote-files t
          backup-each-save-filter-function 'backup-each-save-filter
          backup-directory-alist `(("." . ,(expand-file-name "emacs-backups" user-emacs-directory)))
          backup-by-copying t
          delete-old-versions t
          kept-new-versions 25
          kept-old-versions 1
          vc-make-backup-files t
          version-control t))

 #+END_SRC


** Browse at remote
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package browse-at-remote
    :bind (("s-b" . browse-at-remote)))

 #+END_SRC


** Buffer/Window/Frame navigation
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq split-height-threshold 160
        split-width-threshold 230)

  (use-package buffer-move
    :bind (("<C-s-down>" . buf-move-down)
           ("<C-s-left>" . buf-move-left)
           ("<C-s-right>" . buf-move-right)
           ("<C-s-up>" . buf-move-up)))

  (use-package window-number)
  (window-number-meta-mode 1)

  (defun back-window (&optional arg)
    (interactive "P")
    (other-window -1))

  (defun my/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
        (switch-to-next-buffer)))

  (defun my/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))

  (global-set-key (kbd "C-\]") 'other-window)
  (global-set-key (kbd "C-M-\]") 'back-window)

  (global-set-key (kbd "s-2") 'my/vsplit-last-buffer)
  (global-set-key (kbd "s-3") 'my/hsplit-last-buffer)

  (use-package transpose-frame
    :bind (("C-<" . rotate-frame-anticlockwise)
           ("C->" . rotate-frame-clockwise)))

  (defun delete-or-hide-frame (&optional frame force)
    "On macOS if there is a single frame, hide it, instead of deleting it"
    (interactive)
    (if (= 1 (length (frame-list)))
        (ns-do-hide-emacs)
      (delete-frame frame force)))

  (defun other-frame-backwards ()
    (interactive)
    (other-frame -1))

  (global-set-key (kbd "C-`") 'other-frame)
  (global-set-key (kbd "C-~") 'other-frame-backwards)
  (global-set-key (kbd "C-s-]") 'other-frame)
  (global-set-key (kbd "s-0") 'delete-window)
  (global-set-key (kbd "s-1") 'delete-other-windows)

  (defun my-kill-buffer-no-confirm ()
    "Kill current buffer without confirmation."
    (interactive)
    (let ((kill-buffer-query-functions nil))
      (kill-buffer)))

#+END_SRC


** Column Number Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (column-number-mode t)

#+END_SRC


** Comint
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package comint :straight nil :ensure nil)

 #+END_SRC


** Company-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :bind (("\M-\t" . company-complete))
    :diminish (company-mode . " 🕴")
    :config
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
 #+END_SRC


** compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ansi-color
    :hook (compilation-filter . ansi-color-compilation-filter))

  (setq clean-compile-command "say \"No clean compile command set\"")
  (defun conornash/compile-clean-func ()
    "This function does a clean compile."
    (interactive)
    (setq-local original-compile-command compile-command)
    (async-shell-command clean-compile-command)
    (setq-local compile-command original-compile-command))

  (global-set-key (kbd "<f5>") 'projectile-compile-project)
  (global-set-key (kbd "<C-f5>") 'compile)
  (global-set-key (kbd "<C-M-f5>") 'shell)
  (global-set-key (kbd "<M-f5>") 'conornash/compile-clean-func)
 #+END_SRC


** CSV Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package csv-mode
    :mode "\\.csv\\'" "\\.psv\\'" "\\.tsv\\'"
    :config
    (setq csv-separators '("," "\t" "|")))

  (add-hook 'csv-mode-hook
            #'(lambda ()
               (setq-local isearch-lazy-highlight nil)
               (hl-line-mode 1)))
#+END_SRC


** cua-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (cua-mode t)
  (setq cua-enable-cua-keys nil
        cua-delete-selection nil
        delete-active-region 'kill)
  (delete-selection-mode -1)

 #+END_SRC



** dbt
#+begin_src emacs-lisp :tangle yes

  (setq dbt-log-highlights
        '(("^[0-9]+-[0-9]+-[0-9]+ [.0-:]+" . font-lock-function-name-face)
          ("[0-9]+-[0-9]+-[0-9]+ [.0-:]+ \\([^:]+\\)" . (1 font-lock-constant-face))
  ))


  (define-derived-mode dbt-log-mode fundamental-mode "dbt log"
    "major mode for editing dbt-log language code."
    (setq font-lock-defaults '(dbt-log-highlights)))

  ;; (use-package dbt-log-mode
  ;;   :straight nil
  ;;   :ensure nil
  ;;   :mode "\\.dbt.log'"
  ;;   )

#+end_src



** Dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ls-lisp
    :straight nil
    :ensure nil)

  (use-package dired
    :ensure nil
    :straight nil
    :bind (("C-x C-j" . dired-jump)
           ("C-x M-f" . find-name-dired))

    :config
    (setq ls-lisp-use-insert-directory-program nil
          dired-dwim-target t
          dired-listing-switches "-alh")
    (add-hook 'dired-mode-hook
              #'(lambda ()
                  (hl-line-mode 1)))

    (defun dired-open-file ()
      "In dired, open the file named on this line."
      (interactive)
      (let* ((file (dired-get-filename nil t)))
        (message "Opening %s..." file)
        (async-shell-command (format "open \"%s\"" file))
        (message "Opening %s done" file)))

    (defun dired-back-to-top ()
      (interactive)
      (goto-char (point-min))
      (dired-next-line 4))

    (defun dired-jump-to-bottom ()
      (interactive)
      (goto-char (point-max))
      (dired-next-line -1))

    (unbind-key "j" dired-mode-map)
    (define-key dired-mode-map (kbd "C-w") 'dired-copy-filename-sans-extension)
    (define-key dired-mode-map (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
    (define-key dired-mode-map (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
    (define-key dired-mode-map (kbd "s-o") 'dired-open-file)

    (defun dired-mark-files-older-than (days)
      "Mark files older than DAYS days in dired."
      (interactive "nMark files older than (days): ")
      (let ((now (current-time))
            (seconds-per-day (* 24 60 60)))
        (dired-mark-if
         (and (not (looking-at-p dired-re-dot))
              (not (looking-at-p dired-re-dir))
              (let* ((file-attrs (file-attributes (dired-get-filename t t)))
                     (modtime (nth 5 file-attrs))
                     (diff-time (time-subtract now modtime))
                     (diff-days (/ (float-time diff-time) seconds-per-day)))
                (> diff-days days)))
         "older")))

    (defun dired-copy-filename-sans-extension (&optional arg)
    "Copy the current file name without extension to the kill ring.
  With prefix ARG, copy the full path including extension."
    (interactive "P")
    (let* ((file (dired-get-filename nil t))
           (text-to-copy
            (if arg
                file  ; With prefix: full path with extension
              (file-name-sans-extension (file-name-nondirectory file)))))
      (when file
        (kill-new text-to-copy)
        (message "Copied: %s" text-to-copy))))

    (defun dired-stage-file ()
      "Stage the file at point in Dired using Git."
      (interactive)
      (let ((file (dired-get-file-for-visit)))
        (if (file-exists-p file)
            (progn
              (shell-command (concat "git add -f " (shell-quote-argument file)))
              (message "Staged: %s" file))
          (message "File does not exist")))))

  ;; (use-package dirvish
  ;;   :init
  ;;   (dirvish-override-dired-mode)
  ;;   :config
  ;;   (defun dired-open-file ()
  ;;     "In dired, open the file named on this line."
  ;;     (interactive)
  ;;     (let* ((file (dired-get-filename nil t)))
  ;;       (message "Opening %s..." file)
  ;;       (async-shell-command (format "open \"%s\"" file))
  ;;       (message "Opening %s done" file)))
  ;;   (setq insert-directory-program "gls"
  ;;         dired-rsync-command "/opt/homebrew/bin/rsync"
  ;;         dired-dwim-target t)
  ;;   :bind
  ;;   (:map dired-mode-map
  ;;         ("s-o" . dired-open-file)
  ;;         ("a" . dired-stage-file)
  ;;         ("C-w" . dirvish-copy-file-name)))

  (use-package reveal-in-osx-finder)
  (use-package dired-rsync-transient
    :bind (:map dired-mode-map
                ("C-c C-x" . dired-rsync-transient)))

 #+END_SRC


*** Write a function in Elisp for dired that recursively lists all directories in the same buffer

#+begin_src emacs-lisp :tangle yes
  (defun dired-list-recursive ()
    "List all subdirectories recursively in the current dired buffer."
    (interactive)
    (let ((dir (dired-current-directory)))
      (find-name-dired
       dir
       "*")
      (rename-buffer (format "*Dired recursive: %s*" dir))))

#+end_src

This function uses `find-name-dired` with the `-type d` option to recursively list all directories starting from the current dired directory. It also renames the buffer to indicate it's showing a recursive directory listing.

** Direnv
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package direnv
    :config
    (direnv-mode))
  (use-package dotenv-mode)
#+END_SRC


** Docker
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package docker
    :bind (("<f7>" . docker)
           ("<M-f7>" . docker-containers)
           ("<C-f7>" . docker-images)))
#+END_SRC


** Dockerfile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :mode "Dockerfile\\'")

  (add-hook 'dockerfile-mode-hook
            #'(lambda ()
                (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                ))

 #+END_SRC


** Edebug
#+BEGIN_SRC emacs-lisp :tangle yes
(setq edebug-trace t
      edebug-save-windows nil)

 #+END_SRC


** Ediff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ediff
    :ensure nil
    :bind (("<C-f11>" . ediff)
           ("<M-f11>" . ediff-buffers)
           ("<C-M-f11>" . ediff-regions-wordwise)
           ("<f11>" . ediff-show-registry))

    :config
    (defun ediff-copy-both-to-C ()
      (interactive)
      (ediff-copy-diff ediff-current-difference nil 'C nil
                       (concat
                        (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                        (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
    (defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
    (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)

    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain))


 #+END_SRC


** Eglot
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package track-changes
    :straight (:host github :repo "emacs-straight/track-changes"))
  (use-package eglot
    :ensure t
    :hook (sql-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(sql-mode . ("/Users/conornash/go/bin/sqls")))
    :custom
    (eglot-extend-to-xref t))

#+end_src


** Enable case-region
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(global-set-key (kbd "M-c") 'capitalize-word)
(global-set-key (kbd "M-l") 'downcase-word)
(global-set-key (kbd "M-u") 'upcase-word)
 #+END_SRC


** Enable narrowing
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)

 #+END_SRC


** Encryption
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; EasyPG
  (require 'epa-file)
  (epa-file-enable)

 #+END_SRC


** Expand region
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :bind (("M-#" . er/expand-region)
           ("C-M-#" . er/contract-region))
    :config
    ;; Remove er/mark-word
    (setq er/try-expand-list '(er/mark-symbol
                               er/mark-symbol-with-prefix er/mark-next-accessor
                               er/mark-method-call er/mark-inside-quotes
                               er/mark-outside-quotes er/mark-inside-pairs
                               er/mark-outside-pairs er/mark-comment er/mark-url er/mark-email
                               er/mark-defun)))
 #+END_SRC


** fill-paragraph
#+begin_src emacs-lisp :tangle yes
  (setq fill-column 160)
#+end_src



** Find file at point
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (setq abbrev-file-name "~/.emacs.d/abbrev_defs"
  ;;       save-abbrevs nil
  ;;       hippie-expand-try-functions-list
  ;;       '(try-expand-dabbrev-all-buffers
  ;;         try-complete-file-name
  ;;         try-complete-file-name-partially
  ;;         try-complete-lisp-symbol
  ;;         try-complete-lisp-symbol-partially
  ;;         try-expand-all-abbrevs
  ;;         try-expand-dabbrev
  ;;         try-expand-dabbrev-from-kill
  ;;         try-expand-dabbrev-visible
  ;;         try-expand-line
  ;;         try-expand-list
  ;;         yas-hippie-try-expand))

 #+END_SRC


** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :bind (("s-[" . flycheck-previous-error)
           ("s-]" . flycheck-next-error))
    :config
    (flycheck-define-checker sqlfluff
      "A SQL syntax checker using the sqlfluff tool."
      :command ("sqlfluff" "fix"
                "--disable-progress-bar"
                "--nocolor"
                "--dialect=postgres" source)
      ;; :standard-input t
      :error-patterns
      ((error line-start
              "L:" (zero-or-more space) line (zero-or-more space)
              "| P:" (zero-or-more space) column (zero-or-more space)
              "|" (message (one-or-more not-newline)) line-end))
      ;; :predicate flycheck-buffer-saved-p
      :modes (sql-mode))

    (add-to-list 'flycheck-checkers 'sqlfluff)
    (setq flycheck-sql-sqlint-executable "sql-lint"
          flycheck-sqlfluff-executable "sqlfluff"))

#+END_SRC



** Guide-key
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package guide-key
    :diminish guide-key-mode
    :config
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v" "C-x j" "<C-f1>" "C-;" "C-c" "<f2>" "s-p" "C-c p" "C-x p")
          guide-key/idle-delay 0.5
          guide-key/recursive-key-sequence-flag t))
  (guide-key-mode 1)


#+END_SRC


** Help-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'help-mode-hook #'(lambda()
                              (define-key help-mode-map (kbd "b") 'help-go-back)
                              (define-key help-mode-map (kbd "f") 'help-go-forward)))

 #+END_SRC


** Helpful package
This is a system that makes `helm-apropos` more useful
#+BEGIN_SRC emacs-lisp :tangle yes :eval never
  (use-package helpful
    :commands (helpful-function helpful-variable)
    :bind (("C-h k" . helpful-key)))

#+END_SRC


** hmac
#+BEGIN_SRC emacs-lisp :tangle yes :eval never
  (use-package hmac
    :commands (hmac))
#+END_SRC


** hungry-delete
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :diminish (hungry-delete-mode . " 𐑙")
    :config
    (setq hungry-delete-chars-to-skip " \t\f\v")
    (defalias 'delete-backward-char 'hungry-delete-backward "To delete a single character provide a numeric prefix.")
    (defalias 'delete-forward-char 'hungry-delete-forward "To delete a single character provide a numeric prefix."))
  (global-hungry-delete-mode 1)
 #+END_SRC


** iBuffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :ensure nil
    :bind (("<f8>" . ibuffer)
           ("C-x C-b" . ibuffer)))

 #+END_SRC


** indent-guide
#+begin_src emacs-lisp :tangle yes

  (use-package indent-guide)
  (use-package highlight-indentation)

#+end_src


** isearch
#+BEGIN_SRC emacs-lisp :tangle yes
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))

(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
(define-key isearch-mode-map (kbd "<backspace>") 'conor-mydelete)
(define-key isearch-mode-map (kbd "M-o") 'helm-swoop-from-isearch)
(define-key isearch-mode-map (kbd "C-<return>") 'isearch-exit-other-end)

 #+END_SRC


** ispell
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ispell
    :config
    (setq ispell-program-name "aspell"))
 #+END_SRC


** Jinja2
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package jinja2-mode
    :defer t
    ;; (turn-on-smartparens-strict-mode)
    )
#+END_SRC



** jq-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package jq-mode
    :ensure-system-package jq
    :mode "\\.jq\\'")

 #+END_SRC


** JSON
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package json-mode
    :after origami
    :mode "\\.json\\'" "\\.jsonl\\'"
    :config
    (setq json-reformat:indent-width 2))

  (add-hook 'json-mode-hook
            #'(lambda ()
                (origami-mode 1)
                (rainbow-mode 1)
                (smartparens-strict-mode 1)
                (define-key json-mode-map (kbd "C-M-\\") 'json-pretty-print)
                (define-key origami-mode-map (kbd "<M-tab>") 'origami-recursively-toggle-node)
                (define-key origami-mode-map (kbd "<S-tab>") 'origami-toggle-all-nodes)
                ))


 #+END_SRC


** Keychain
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package keychain-environment)
  (keychain-refresh-environment)


#+END_SRC


** Keyfreq
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package keyfreq
  :config
  (setq keyfreq-excluded-commands
        '(self-insert-command
          keyboard-quit
          abort-recursive-edit
          )
        keyfreq-file (expand-file-name "keyfreq" user-emacs-directory))
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))


#+END_SRC


** kill ring
#+BEGIN_SRC emacs-lisp :tangle yes
(setq kill-ring-max 200)

 #+END_SRC


** Line numbers
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; This should be set regardless of using the nlinum package
  ;; `goto-line-with-feedback' depends on it
  (setq line-number-display-limit-width 9000000)

  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
        (progn
          (display-line-numbers-mode 1)
          (goto-char (point-min))
          (forward-line (1- (read-number "Goto line: ")))
          (display-line-numbers-mode -1))))

#+END_SRC



** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package llama
    :straight (:host github :repo "tarsius/llama"))
  ;; (use-package git-commit)
  (use-package dash)
  (use-package magit
    :commands magit-status
    :bind (("<f6>" . magit-status))
    :config
    (add-hook 'with-editor-mode-hook
              #'(lambda ()
                  (orgtbl-mode 1)
                  (orgalist-mode 1)))
    (add-to-list 'Info-directory-list "/Users/conornash/.emacs.d/straight/build/magit/")
    (setq magit-push-always-verify nil
          magit-diff-refine-hunk t
          magit-diff-use-overlays nil
          magit-revision-headers-format "Author:     %aN <%aE>
  AuthorDate: %ad
  Commit:     %cN <%cE>
  CommitDate: %cd
  Signature:  %GG
  "
          magit-status-sections-hook '(magit-insert-status-headers
                                       magit-insert-merge-log
                                       magit-insert-rebase-sequence
                                       magit-insert-am-sequence
                                       magit-insert-sequencer-sequence
                                       magit-insert-bisect-output
                                       magit-insert-bisect-rest
                                       magit-insert-bisect-log
                                       magit-insert-untracked-files
                                       magit-insert-unstaged-changes
                                       magit-insert-staged-changes
                                       magit-insert-stashes
                                       magit-insert-unpulled-from-upstream
                                       magit-insert-unpulled-from-pushremote
                                       magit-insert-unpushed-to-upstream
                                       magit-insert-unpushed-to-pushremote)
          transient-default-level 5))

  (use-package forge
    :after magit)
 #+END_SRC


** Man pages
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package woman
    :commands (helm-man-woman))

  (add-hook 'woman-mode-hook
            #'(lambda ()
               (subword-mode -1)))
#+END_SRC



** Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :mode "\\.md\\'")

 #+END_SRC


** Multiple cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :bind (("C-M-@" . mc/mark-previous-like-this)
           ("M-@" . mc/mark-next-like-this)
           ("s-a" . mc/edit-beginnings-of-lines)
           ("s-e" . mc/edit-ends-of-lines))

    :config
    (setq mc/list-file (expand-file-name "emacs30.mc.el" user-emacs-directory)
          mc/insert-numbers-default 1))

 #+END_SRC


** Nov.el
#+begin_src emacs-lisp :tangle yes :eval never
  (use-package olivetti
    :config
    (setq olivetti-body-width 0.85))

  (use-package nov
    :mode ("\\.epub\\'" . nov-mode))

  (add-hook 'nov-mode-hook
            #'(lambda ()
                (olivetti-mode 1)
                (define-key nov-mode-map (kbd "u") 'nov-goto-toc)
                (set-window-margins (current-buffer) 1 1)))
#+end_src


** Powershell
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powershell)

 #+END_SRC


** Prettify
#+BEGIN_SRC emacs-lisp :tangle yes

  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-unprettify-at-point 'right-edge)

 #+END_SRC


** Projectile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("s-p" . projectile-command-map)
                ("C-c p" . projectile-command-map))
    :config
    (setq projectile-per-project-compilation-buffer t))
#+end_src

** pulse
#+BEGIN_SRC emacs-lisp :tangle yes

  (defun conor-pulse-hook (&rest arg)
    (pulse-line-hook-function))

  (use-package pulse
    :ensure nil
    :config
    (setq
     pulse-command-advice-flag  	t
     pulse-iterations           	25
     pulse-delay                	0.05)
    (face-spec-set 'pulse-highlight-start-face	'((((class color) (background dark))
                                                     (:background "#AAAAAA"))
                                                    (((class color) (background light))
                                                     (:background "#FFFFFF"))))
    (face-spec-set 'pulse-highlight-face '((((class color) (background dark))
                                            (:background "#AAAAAA"))
                                           (((class color) (background light))
                                            (:background "#FFFFFF"))))
    (dolist (command '(scroll-up
                       scroll-down
                       recenter-top-bottom
                       other-window))
      (advice-add command :filter-return #'conor-pulse-hook)))

 #+END_SRC



** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :commands (rainbow-delimiters-mode rainbow-delimiters-mode-enable
                                       rainbow-delimiters-mode-disable)
    :config
    (face-spec-set 'rainbow-delimiters-depth-1-face
                   '((t :foreground "#e2e2e2")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-2-face
                   '((t :foreground "#e1ffe1")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-3-face
                   '((t :foreground "#ffdfbf")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-4-face
                   '((t :foreground "#efefff")) 'face-defface-spec))

#+END_SRC

** rainbow-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
    :diminish (rainbow-mode . " 🌈"))
 #+END_SRC


** Recentf
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package recentf
  :config
  (setq recentf-max-saved-items nil))

 #+END_SRC


** Restclient
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :config
    (use-package restclient-helm)
    ;; (use-package ob-restclient
    ;;   :config
    ;;   (org-babel-do-load-languages
    ;;    'org-babel-load-languages
    ;;    '((restclient . t))))
    )

  (add-hook 'restclient-mode-hook
            #'(lambda ()
                (json-pretty-print-buffer-ordered)
                (turn-on-smartparens-strict-mode)))


 #+END_SRC


** Shell
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'sh-mode-hook
            #'(lambda()
                (define-key sh-mode-map (kbd "C-\\") 'shell-eval-line)              
                ))

  (defun term-toggle-mode ()
    (interactive)
    (if (term-in-line-mode)
        (term-char-mode)
      (term-line-mode)))

  (use-package term
    :commands (term)
    :ensure nil
    )

  (setq shell-file-name "/opt/homebrew/bin/bash"
      explicit-shell-file-name "/opt/homebrew/bin/bash")
 #+END_SRC


** Show-paren
#+BEGIN_SRC emacs-lisp :tangle yes
(show-paren-mode 1)
#+END_SRC


** SSH mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ssh-config-mode)
  (add-to-list 'auto-mode-alist '(".ssh/config\\'"       . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("sshd?_config\\'"      . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("known_hosts\\'"       . ssh-known-hosts-mode))
  (add-to-list 'auto-mode-alist '("authorized_keys2?\\'" . ssh-authorized-keys-mode))
  (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
  (add-hook 'ssh-config-mode-hook 'delete-trailing-whitespace)

 #+END_SRC


** Subword mode
#+BEGIN_SRC emacs-lisp :tangle yes

(setq subword-forward-regexp "\\W*\\(\\([[:upper:]]*\\(\\W\\)?\\)[[:lower:][:digit:]]*[_.-]*\\)"
      subword-backward-regexp "\\(\\(\\W\\|[[:lower:][:digit:]]\\)\\([[:upper:]]+\\W*\\)\\|\\W\\w+\\)")


 #+END_SRC


** Tabs defaults
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq default-tab-width 4
        tab-width 4)

  (setq-default indent-tabs-mode nil
                tab-width 4)

 #+END_SRC


** Terraform
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package terraform-mode)
 #+END_SRC


** Toml
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package toml)
 #+END_SRC


** Tramp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tramp)

  (setq
   magit-tramp-pipe-stty-settings 'pty
   remote-file-name-inhibit-auto-save-visited t
   remote-file-name-inhibit-locks t
   tramp-copy-size-limit (* 1024 1024) ;; 1MB
   tramp-use-scp-direct-remote-copying t
   tramp-verbose 2
    )

  (connection-local-set-profile-variables
   'remote-direct-async-process
   '((tramp-direct-async-process . t)))

  (connection-local-set-profiles
   '(:application tramp :protocol "scp")
   'remote-direct-async-process)
  (defalias 'tcac 'tramp-cleanup-all-connections)

  (with-eval-after-load 'tramp
    (with-eval-after-load 'compile
      (remove-hook 'compilation-mode-hook #'tramp-compile-disable-ssh-controlmaster-options)))
 #+END_SRC


** Undo Fu
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-fu
    :bind (("C-/" . undo-fu-only-undo)
           ("C-?" . undo-fu-only-redo)))

 #+END_SRC



** Uniquify
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package uniquify
    :ensure nil
    :straight nil
    :config
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

 #+END_SRC


** VC settings
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vc
  :config
  (setq vc-follow-symlinks t))

 #+END_SRC


** Visual line mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-line-mode
    :straight nil
    :ensure nil
    :hook ((markdown-mode org-mode) . visual-line-mode)
    :diminish (visual-line-mode . " ↩️"))
 #+END_SRC


** visual-regexp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-regexp
    :bind (("s-:" . query-replace-regexp)
           ("s-;" . vr/replace)))

  ;; (use-package visual-regexp-steroids
  ;;   :straight (:host github :repo "benma/visual-regexp-steroids.el"))

  ;; (defun ignore-read-only-replacements (orig-func &rest args)
  ;;   "Advise the `vr/replace` function to ignore read-only text being replaced."
  ;;   (let ((inhibit-read-only t))
  ;;     (apply orig-func args)))

  ;; (advice-add 'vr/replace :around #'ignore-read-only-replacements)
 #+END_SRC


** w3m
#+BEGIN_SRC emacs-lisp :tangle yes
(setq browse-url-browser-function 'browse-url-default-macosx-browser)

 #+END_SRC


** web-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :mode "\\.html\\'" "\\.php\\'" "\\.tpl\\'" "\\.mustache\\'" "\\.erb\\'" "\\.jinja\\'" "\\.jinja2\\'" "\\.twig\\'"
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-engine-detection t
          ;; ( web-mode-indent-style 2)
          web-mode-style-padding 1
          web-mode-script-padding 1
          web-mode-block-padding 0))

  (add-hook 'web-mode-hook
            #'(lambda ()
               (rainbow-mode 1)
               (turn-on-smartparens-strict-mode)))
 #+END_SRC


** Whitespace mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace
    :bind (("C-c w" . whitespace-mode))
    :config
    (setq whitespace-display-mappings
          ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
          '(
            (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
            (newline-mark 10 [182 10]) ; 10 LINE FEED
            (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
            )
          whitespace-style '(face tabs spaces trailing space-before-tab::space newline indentation::space indentation indentation::tab empty space-after-tab::space space-mark tab-mark newline-mark)))

 #+END_SRC


** YAML
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yafolding
    :config
    (define-key yafolding-mode-map (kbd "<M-tab>") 'yafolding-toggle-element)
    (define-key yafolding-mode-map (kbd "<S-tab>") 'origami-toggle-all-nodes)
    )
  (use-package yaml-mode
    :mode "\\.lookml\\'" "\\.yaml.template\\'" "\\.yaml\\'" "\\.yml\\'")

  (add-hook 'yaml-mode-hook
            #'(lambda ()
                (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                (origami-mode 1)
                (yafolding-mode 1)
                ))


  (use-package yaml-pro)
 #+END_SRC


** yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish
    ((yas-minor-mode . " ✀")
     (yas-global-mode . " ✀✀"))
    :bind (("C-z" . yas-expand))
    ;; :config
    ;; (add-to-list 'yas-snippet-dirs (expand-file-name "snippets" user-emacs-directory))
    )
  (yas-global-mode 1)

 #+END_SRC


* Languages
** Coffeescript
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package coffee-mode)
#+end_src
** Elisp functions
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Emacs Lisp
  (org-babel-load-if-exists (expand-file-name "emacs24.elisp.org" user-emacs-directory))


#+END_SRC



** ESS / R
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-if-exists (expand-file-name "emacs24.ess.org" user-emacs-directory))
 #+END_SRC



** Javascript / Typescript
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-if-exists (expand-file-name "emacs24.js2.org" user-emacs-directory))
  (use-package tide
    :config
    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t))

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    :hook
    (typescript-mode . (lambda ()

                         (flycheck-mode +1)
                         (turn-on-smartparens-strict-mode)
                         (add-hook 'before-save-hook 'tide-format-before-save nil t)
                         (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)

                         (eldoc-mode +1)
                         (tide-hl-identifier-mode +1)
                         ;; company is an optional dependency. You have to
                         ;; install it separately via package-install
                         ;; `M-x package-install [ret] company`
                         (company-mode +1))))



  ;; (defun setup-tide-mode ()
  ;;   (interactive)
  ;;   (tide-setup)
  ;;   (flycheck-mode +1)
  ;;   (smartparens-strict-mode +1)
  ;;   (add-hook 'before-save-hook 'tide-format-before-save)
  ;;   (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
  ;;   (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;;   (eldoc-mode +1)
  ;;   (tide-hl-identifier-mode +1)
  ;;   ;; company is an optional dependency. You have to
  ;;   ;; install it separately via package-install
  ;;   ;; `M-x package-install [ret] company`
  ;;   (company-mode +1))



  ;; formats the buffer before saving

  ;; if you use typescript-mode
  ;; if you use treesitter based typescript-ts-mode (emacs 29+)
  ;; (add-hook 'typescript-ts-mode-hook #'setup-tide-mode)
 #+END_SRC


** Lua
#+begin_src emacs-lisp :tangle yes
  (use-package lua-mode
    :interpreter "lua"
    :mode "\\.lua\\'"
    :config
    (setq lua-documentation-function 'eww)
    :hook
    (lua-mode . (lambda ()
                  (set-company-backends-for-lua)

                  ;; (turn-on-smartparens-strict-mode)
                  (define-key lua-mode-map (kbd "M-\\") 'lua-show-process-buffer)
                  (define-key lua-mode-map (kbd "C-c C-r") 'lua-send-region)
                  (define-key lua-mode-map (kbd "C-c C-d") 'lua-search-documentation)
                  (define-key lua-mode-map (kbd "C-c C-b") 'lua-send-buffer)
                  (define-key lua-mode-map (kbd "C-|") 'eval-at-cursor)
                  (define-key lua-mode-map (kbd "C-\\") 'lua-print-current-line)
                  (define-key lua-mode-map (kbd "C-M-x") 'lua-send-defun)

                  (define-key lua-mode-map (kbd "C-M-f") 'lua-forward-sexp)
                  (define-key lua-mode-map (kbd "C-M-b") 'lua-backwards-to-block-begin-or-end)))

    :config
    (setq lua-indent-level 4)
    (setq lua-indent-string-contents t)
    (setq lua-prefix-key nil))

  (defun lua-print-current-line ()
    (interactive)
    (save-excursion
      (lua-send-string (buffer-substring (line-beginning-position) (line-end-position)))))

  (use-package company-lua)

  (defun set-company-backends-for-lua()
    "Set lua company backend."
    (setq-local company-backends '(
                                   (
                                    company-lua
                                    company-keywords
                                    company-gtags
                                    company-yasnippet
                                    )
                                   company-capf
                                   company-dabbrev-code
                                   company-files
                                   )))

#+end_src



** Python
 #+BEGIN_SRC emacs-lisp :tangle yes
   (org-babel-load-file (expand-file-name "emacs24.python.org" user-emacs-directory))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package rust-mode)
    (add-hook 'rust-mode-hook
                #'(lambda ()
                    (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                    (turn-on-smartparens-strict-mode)))

#+end_src

** Scheme
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.scheme.org" user-emacs-directory))

#+END_SRC


** Smalltalk
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shampoo
    :commands (shampoo-connect shampoo-reconnect shampoo-disconnect)
    :mode ( "\\.st\\'" . shampoo-code-mode))

  (add-hook 'shampoo-code-mode-hook
              #'(lambda ()
                 (rainbow-mode 1)
                 (turn-on-smartparens-strict-mode)))

 #+END_SRC


** SQL
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.sql.org" user-emacs-directory))

 #+END_SRC


** STScript (SillyTavern)
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package stscript-mode
    :mode "\\.stscript\\'"
    :straight (:host github :repo "conornash/stscript-mode")
    :config
    (add-hook 'stscript-mode-hook
              #'(lambda ()
                  (turn-on-smartparens-strict-mode)
                  (sp-local-pair 'stscript-mode "{:" ":}" :trigger ":{")
                  )))


#+end_src


** Toolscript
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.rsx\\'" . nxml-mode))
#+end_src


* Themes
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package zenburn-theme
    :defines
    zenburn-use-variable-pitch
    zenburn-scale-org-headlines
    zenburn-scale-outline-headlines
    zenburn-override-colors-alist
    :init
    (setq zenburn-use-variable-pitch nil
        zenburn-scale-org-headlines t
        zenburn-scale-outline-headlines t
        zenburn-override-colors-alist
        '(("zenburn-bg-1"     . "#1B1B1B")
          ("zenburn-bg-08"    . "#202020")
          ("zenburn-bg-05"    . "#282828")
          ("zenburn-bg"       . "#2F2F2F"))))

  (load-theme 'zenburn t t)
  (enable-theme 'zenburn)

  ;; (modify-frame-parameters nil '((wait-for-wm . nil)))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(undecorated-round . t))
  ;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC


* Fonts
#+BEGIN_SRC emacs-lisp :tangle yes

  (add-to-list 'default-frame-alist '(font . "Inconsolata-lig"))

  ;; (set-face-attribute 'font-lock-comment-face nil
  ;;                     :weight 'medium
  ;;                     :slant 'italic)

  ;; (set-face-attribute 'font-lock-variable-name-face nil
  ;;                     :weight 'medium
  ;;                     ;; :foreground "#FFB380"
  ;;                     :foreground "#FFBF94")



  (setq face-font-family-alternatives '(("Monospace" "Cascadia Code PL" "Inconsolata" "Catrinity" "Consolas" "Catrinity" "Noto Sans" "Noto Sans Symbols" "Noto Sans Egyptian Hieroglyphs")
                                        ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "Noto Sans" "Noto Sans Symbols" "Noto Sans Egyptian Hieroglyphs")
                                        ("Sans Serif" "Johnston ITC Std" "Effra" "Noto Sans" "Noto Sans Symbols" "Noto Sans Egyptian Hieroglyphs")
                                        ))

  (use-package ligature
    :functions
    global-ligature-mode
    ligature-set-ligatures
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))

  (use-package unicode-fonts
    :config
    (unicode-fonts-setup))
#+END_SRC


* Parsing

** Tree-sitter
#+begin_src emacs-lisp :tangle yes
  ;; (if (treesit-available-p)
  ;;     (message "Tree-sitter available"))

  ;; (treesit-ready-p 'c)
  ;; (treesit-ready-p 'css)
  ;; (treesit-ready-p 'go)
  ;; (treesit-ready-p 'html)
  ;; (treesit-ready-p 'javascript)
  ;; (treesit-ready-p 'json)
  ;; (treesit-ready-p 'python)

  ;; (use-package json-ts-mode
  ;;   :after origami
  ;;   :mode "\\.json\\'" "\\.jsonl\\'"
  ;;   :config
  ;;   (setq json-reformat:indent-width 2))

  ;; (add-hook 'json-ts-mode-hook
  ;;           #'(lambda ()
  ;;               (origami-mode 1)
  ;;               (rainbow-mode 1)
  ;;               (smartparens-strict-mode 1)
  ;;               (define-key json-ts-mode-map (kbd "C-M-\\") 'json-pretty-print)
  ;;               (define-key origami-mode-map (kbd "<M-tab>") 'origami-recursively-toggle-node)
  ;;               (define-key origami-mode-map (kbd "<S-tab>") 'origami-toggle-all-nodes)
  ;;               ))

#+end_src


* Gnus
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gnus-directory (expand-file-name "gnus" user-emacs-directory)
        gnus-startup-file (expand-file-name "newsrc.el" gnus-directory)
        gnus-select-method '(nntp "nntp.aioe.org")
        gnus-server-alist '(("archive" nnfolder "archive"
                             (nnfolder-directory (expand-file-name "nnfolder/archive" gnus-directory))
                             (nnfolder-active-file (expand-file-name "nnfolder/archive/active" gnus-directory))
                             (nnfolder-get-new-mail nil)
                             (nnfolder-inhibit-expiry t))))

  ;; Fix for security vulnerability https://lists.gnu.org/archive/html/info-gnu/2017-09/msg00006.html
  (eval-after-load "enriched"
    '(defun enriched-decode-display-prop (start end &optional param)
       (list start end)))

#+END_SRC


* Eshell
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.eshell.org" user-emacs-directory))

 #+END_SRC


* Keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key comint-mode-map "\C-a" 'comint-bol-or-process-mark)
  (define-key query-replace-map (kbd "C-j") 'newline)
  (global-set-key "\C-c\M-d" 'zero-pad)
  (global-set-key "\C-cg" 'goto-line)
  (global-set-key "\M-/" 'hippie-expand)
  (global-set-key (kbd "<M-f9>") 'ffap-next)
  (global-set-key (kbd "C-'") 'add-single-quoted-argument)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C-M-!") 'conornash/shell-command-do-it)
  (global-set-key (kbd "C-M-%") 'query-replace-regexp)
  (global-set-key (kbd "C-M-,") 'previous-buffer)
  (global-set-key (kbd "C-M-.") 'next-buffer)
  (global-set-key (kbd "C-M-\\") 'indent-region)
  (global-set-key (kbd "C-\"") 'add-quoted-argument)
  (global-set-key (kbd "C-c !") 'org-time-stamp-inactive)
  (global-set-key (kbd "C-c C-f") 'ffap-next)
  (global-set-key (kbd "C-s-SPC") 'insert-char)
  (global-set-key (kbd "C-s-\\") 'uncomment-region)
  (global-set-key (kbd "C-x $") (lambda()(interactive)(insert "€")))
  (global-set-key (kbd "C-x 2") 'my/vsplit-last-buffer)
  (global-set-key (kbd "C-x 3") 'my/hsplit-last-buffer)
  (global-set-key (kbd "M-(") 'nest-outer-round-parens)
  (global-set-key (kbd "M-<down>") 'move-text-down)
  (global-set-key (kbd "M-<up>") 'move-text-up)
  (global-set-key (kbd "M-\\") 'comment-dwim)
  (global-set-key (kbd "M-n") 'iregister-jump-to-next-marker)
  (global-set-key (kbd "M-p") 'iregister-jump-to-previous-marker)
  (global-set-key (kbd "s-!") 'insert-current-timestamp-inactive)
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
  (global-set-key (kbd "s-SPC") 'set-rectangular-region-anchor)
  (global-set-key (kbd "s-k") 'djcb-duplicate-line)
  (global-set-key (kbd "s-q") 'my-kill-buffer-no-confirm)
  (global-set-key [remap beginning-of-visual-line] 'my/smarter-move-beginning-of-line)
  (global-set-key (kbd "<f14>") 'scroll-lock-mode)
#+END_SRC



* End of Config

** Back to usual parameters
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq
   debug-on-quit nil
   debug-on-error nil)
#+END_SRC


** Declare functions for the byte-compiler
#+BEGIN_SRC emacs-lisp :tangle yes

  (eval-when-compile
    (mapc
     (lambda (elem) (declare-function elem (find-lisp-object-file-name elem 'defun)))
     '(auto-compile-on-load-mode
       auto-compile-on-save-mode
       ediff-copy-diff
       ediff-get-region-contents
       exec-path-from-shell-initialize
       global-emojify-mode
       global-hungry-delete-mode
       guide-key-mode
       helm-mode
       key-chord-define-global
       key-chord-mode
       keyfreq-autosave-mode
       keyfreq-mode
       lua-send-string
       org-babel-load-file
       term-char-mode
       term-in-line-mode
       term-line-mode
       tiktoken-count-tokens
       tiktoken-encode
       tiktoken-encoding-for-model
       unicode-fonts-setup
       window-number-meta-mode
       yas-global-mode
       ))
    )
#+END_SRC


** Private settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-if-exists (file-symlink-p (expand-file-name "private.org" user-emacs-directory)))

#+END_SRC


** Customize
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (cond
   ((file-exists-p custom-file)
    (load custom-file))
   (t
    (write-region "" nil custom-file)))
#+END_SRC


** Byte Compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tangle-init ()
      "If the current buffer is an org file in the user directory the code-blocks are
    tangled, and the tangled file is compiled."
      (when (and
             (or
              (equal (file-name-directory (buffer-file-name))
                     (expand-file-name user-emacs-directory))
              (and
               (boundp 'user-private-directory)
               (equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-private-directory))))
             (file-exists-p (buffer-file-name))
             (string= "org" (file-name-extension (buffer-file-name))))
        ;; Avoid running hooks when tangling.
        (let ((prog-mode-hook nil)
              (org-file-to-compile (expand-file-name (buffer-file-name))))
          (org-babel-tangle)
          (byte-compile-file (expand-file-name (concat (file-name-sans-extension org-file-to-compile) ".el"))))))

  (add-hook 'after-save-hook #'tangle-init)
  (add-hook 'kill-emacs-hook #'(lambda ()
                                 (when (file-exists-p (expand-file-name "init.elc" user-emacs-directory))
                                  (delete-file (expand-file-name "init.elc" user-emacs-directory)))))
#+END_SRC

