#+LAST_MOBILE_CHANGE: 2013-02-23 12:26:49
#+TITLE: Conor's Dot Emacs
#+COLUMNS: %50ITEM(Task) %13CLOCKSUM(Clocked Total) %8Effort(Estimate){:} %13CLOCKSUM_T(Clocked Today) %18DEADLINE
#+STARTUP: hidestars indent
#+PROPERTY: Effort_ALL 0 0:05 0:15 0:30 1:00 2:00 5:00 10:00 20:00
#+PROPERTY: ORDERED t
#+SEQ_TODO: NEXTACTION(@) | DONE(@) TRANSFERRED(@) CANCELLED(@)
#+PRIORITIES: A E A
#+DRAWERS: PROPERTIES ARCHIVE
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=blue, urlcolor=blue}
#+STARTUP: hidestars
#+SETUPFILE: theme-readtheorg.setup


* Setup system
** Initial requirements
#+BEGIN_SRC emacs-lisp :tangle yes
  (if (and (fboundp 'native-comp-available-p)
       (native-comp-available-p))
      (setq native-comp-speed 2
            package-native-compile t))

  (if (and (functionp 'json-serialize)
           (json-serialize nil))
      (progn
        (message "Native JSON is available")
        (setq native-comp-deferred-compilation t))
    (message "Native JSON is *not* available"))

  (setq gc-cons-percentage (expt 10 -4)
        gc-cons-threshold (expt 2 22))

  (setq apropos-do-all t
        delete-active-region 'kill
        enable-recursive-minibuffers t
        inhibit-startup-screen t
        load-prefer-newer t
        mac-pass-command-to-system nil
        max-lisp-eval-depth 30000
        max-specpdl-size 15000
        ring-bell-function 'ignore
        save-interprogram-paste-before-kill t)

  (pcase (window-system)
    ('x
     (setq x-meta-keysym 'ctrl
           x-alt-keysym  'meta
           x-ctrl-keysym 'super)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (tool-bar-mode -1))
    ('ns
     (eval-when-compile
       (defvar x-alt-keysym)
       (defvar x-ctrl-keysym)
       (defvar x-meta-keysym)
       )
     (setq mac-command-modifier 'control
           mac-control-modifier 'super
           mac-option-modifier 'meta)
     (scroll-bar-mode -1)
     (tool-bar-mode -1))
    (_
     (menu-bar-mode -1)
     (tool-bar-mode -1)))

  ;; Emacs bug
  (if (and (< emacs-major-version 27) (< emacs-minor-version 3))
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  ;; Don't say yes or no, just y or n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Coding system
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; Unicode coding
  (set-language-environment "UTF-8")


#+END_SRC


** Package Management
#+begin_src emacs-lisp :tangle yes

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t
        package--init-file-ensured t
        package-enable-at-startup nil
        use-package-always-ensure t
        use-package-verbose t)

  ;; (package-initialize)
  ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
  ;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  ;; (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/")) ;; Goes down often
  ;; ;; (add-to-list 'package-archives '("gnu" . "http://mirrors.163.com/elpa/gnu/"))
  ;; (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  ;; (package-refresh-contents)

  ;; (mapc (lambda (elem)
  ;;         (unless (package-installed-p elem)
  ;;           (package-install elem)))
  ;;       '(diminish use-package bind-key))

  (eval-when-compile
    (require 'use-package)
    (require 'straight))
  (require 'files)

  (use-package bind-key)
  (use-package diminish)

  (use-package use-package-ensure-system-package)
  (use-package use-package-chords
    :config (key-chord-mode 1))
#+end_src


** Environment Variables
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Pull in environment variables
  (defvar exec-path-from-shell-warn-duration-millis)
  (use-package exec-path-from-shell)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  ;; To allow Python to be in UTF-8
  (defvar universal-coding-system-env-list '("PYTHONIOENCODING")
    "List of environment variables \\[universal-coding-system-argument] should set")

  (defadvice universal-coding-system-argument (around provide-env-handler activate)
    "Augments \\[universal-coding-system-argument] so it also sets environment variables

  Naively sets all environment variables specified in
  `universal-coding-system-env-list' to the literal string
  representation of the argument `coding-system'.

  No guarantees are made that the environment variables set by this advice support
  the same coding systems as Emacs."
    (let ((process-environment (copy-alist process-environment)))
      (dolist (extra-env universal-coding-system-env-list)
        (setenv extra-env (symbol-name (ad-get-arg 0))))
      ad-do-it))

  (setenv "LC_ALL" "en_US.UTF-8")
  (setenv "LANG" "en_US.UTF-8")
#+END_SRC


** Automatically refresh open files if changed on disk
#+BEGIN_SRC emacs-lisp :tangle yes

  (global-auto-revert-mode t)
  (setq auto-revert-interval 2
        ;; Also auto refresh dired, but be quiet about it
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)


 #+END_SRC


** Calendar
#+BEGIN_SRC emacs-lisp :tangle yes
(setq calendar-latitude 38.6
      calendar-longitude -90.1
      calendar-location-name "St. Louis")

 #+END_SRC


* Org Mode
** Get Org version
  For straight.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'subr-x)
  (straight-use-package 'git)

  (defun org-git-version ()
    "The Git version of org-mode.
  Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (git-run "describe"
                "--match=release\*"
                "--abbrev=6"
                "HEAD"))))

  (defun org-release ()
    "The release version of org-mode.
  Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (string-remove-prefix
        "release_"
        (git-run "describe"
                 "--match=release\*"
                 "--abbrev=0"
                 "HEAD")))))

#+END_SRC



** Helper Functions
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun org-babel-load-if-exists (org-file)
    (when (file-exists-p org-file)
      (org-babel-load-file org-file)))

  (defun insert-current-timestamp-inactive ()
    (interactive)
    (let ((current-prefix-arg '(16)))
      (org-time-stamp-inactive current-prefix-arg)))

  (defun caolan/repeated-string (n str)
    (string-join (make-list (+ n 1) "") str))

  (defun path-to-breadcrumbs (file basedir)
    (let ((dir (expand-file-name (file-name-directory file))))
      (if (and (string-equal dir (expand-file-name basedir))
               (string-equal (file-name-base file) "index"))
          ;; empty breadcrumbs to show we're at root index page
          nil
        (let* ((crumb-path (directory-file-name
                            (file-relative-name dir basedir)))
               (crumb-parts (cl-remove-if
                             (lambda (x) (string-equal x "."))
                             (reverse (split-string crumb-path "/"))))
               (crumbs (and crumb-parts
                            (list (cons (car crumb-parts) "index.html")))))
          ;; parent directories
          (dotimes (i (length (cdr crumb-parts)))
            (setq crumbs
                  (cons (cons (nth i (cdr crumb-parts))
                              (concat (caolan/repeated-string (+ i 1) "../")
                                      "index.html"))
                        crumbs)))
          (setq crumbs
                (cons `("NBS" . ,(if (> (length crumb-parts) 0)
                                     (concat (caolan/repeated-string
                                              (length crumb-parts)
                                              "../")
                                             "index.html")
                                   "index.html"))
                      crumbs))
          (if (string-equal (file-name-base file) "index")
              (butlast crumbs)
            crumbs)))))

  (defun my-website-preamble (plist project-name)
    (let* ((file (expand-file-name (plist-get plist :input-file)))
           (basedir (file-name-as-directory (plist-get plist :base-directory)))
           (crumbs (path-to-breadcrumbs file basedir))
           (date (org-publish-find-date file project-name)))
      (concat
       "<ol class=\"breadcrumbs\">"
       (if crumbs
           (mapconcat (lambda (crumb)
                        (concat "<li>"
                                "<a href=\"" (cdr crumb) "\">"
                                (car crumb)
                                "</a>"
                                "</li>"))
                      crumbs
                      "")
         "<li class=\"current\"><a href=\"index.html\">NBS</a></li>")
       "</ol>"
       (if date
           (concat "<div class=\"date\">"
                   (format-time-string "%d %b %Y" date)
                   "</div>")
         ""))))

  (defun endless/filter-timestamp (trans back _comm)
    "Remove <> around time-stamps."
    (pcase back
      ((or `jekyll `html)
       (progn
         (replace-regexp-in-string "&[lg]t;" "" trans)))
      (`latex
       (replace-regexp-in-string "[<>]" "" trans))))
#+END_SRC



** Load Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-contrib-includes-list
        '(ob-arduino ob-clojure-literate ob-csharp ob-eukleides ob-fomus ob-julia ob-mathematica
                     ob-mathomatic ob-oz ob-php ob-redis ob-sclang ob-smiles ob-spice
                     ob-stata ob-tcl ob-vbnet ol-bookmark ol-elisp-symbol ol-git-link ol-man
                     ol-mew ol-notmuch ol-vm ol-wl org-annotate-file org-attach-embedded-images org-bibtex-extras
                     org-checklist org-choose org-collector org-contacts org-contribdir org-depend org-effectiveness
                     org-eldoc org-eval org-eval-light org-expiry org-interactive-query org-invoice org-learn
                     org-license org-mac-iCal org-mac-link org-mairix org-notify org-panel org-passwords
                     org-registry org-screen org-screenshot org-secretary org-static-mathjax org-sudoku orgtbl-sqlinsert
                     org-toc org-track org-velocity org-wikinodes ox-bibtex ox-confluence ox-deck
                     ox-extra ox-freemind ox-groff ox-koma-letter ox-rss ox-s5 ox-taskjuggler))
  (use-package org-contrib
    :straight
    (org-contrib :type git
                 :includes org-contrib-includes-list
                 :repo "https://git.sr.ht/~bzg/org-contrib"
                 :files (:defaults "lisp/*.el")))

  (use-package org
    :mode ("\\.org$" . org-mode)
    :diminish
    ((org-src-mode . " ℹ")
     (org-indent-mode . " ⭾"))
    :bind (("<s-tab>" . org-force-cycle-archived)
       ("<s-down>" . org-forward-element)
       ("<s-up>" . org-backward-element)
       ("<s-left>" . org-up-element)
       ("<s-right>" . org-down-element)
       ("M-<down>" . org-metadown)
       ("M-<up>" . org-metaup)
       ("C-c l" . org-store-link)
       ("C-c C-l" . org-insert-link)
       ("C-c C-x C-j" . org-clock-goto)
       ("C-c C-x C-r" . org-clock-report)
       ("s-!" . insert-current-timestamp-inactive)
       ("s-o" . org-open-at-point)
       ("s-O" . org-open-at-point-global))
    :chords
    (("qq" . org-capture)
     ("JJ" . org-agenda))
    :config
    (org-clock-persistence-insinuate)
    (setq comment-start-skip "^\\s-*#\\(?: \\|$\\)"
      org-agenda-dim-blocked-tasks t
      org-agenda-start-with-follow-mode t
      org-agenda-todo-ignore-scheduled nil
      org-clock-out-remove-zero-time-clocks t
      org-clock-persist 'history
      org-confirm-babel-evaluate nil
      org-deadline-warning-days 28
      ;; We don't want to see days in the clock report
      org-duration-format '((special . h:mm))
      org-enforce-todo-dependencies t
      org-fontify-whole-heading-line t
      org-goto-interface 'outline-path-completion
      org-hide-emphasis-markers t
      org-image-actual-width 700
      org-list-allow-alphabetical t
      org-log-done t
      ;; Timestamp of changes to deadline using C-c C-d/C-s
      org-log-redeadline 'time
      org-log-reschedule 'time
      ;; org-modules '()
      org-outline-path-complete-in-steps nil
      org-refile-targets '((org-agenda-files . (:maxlevel . 2))
           (org-agenda-files . (:todo . "NEXTACTION"))
           (nil . (:maxlevel . 2)))
      org-refile-use-outline-path 'file
      ;; In Sparse Trees, show the details below the matching entries
      org-src-window-setup 'current-window
      org-src-fontify-natively t
      org-show-entry-below t
      org-table-last-column-widths '(95 7 5)
      org-use-property-inheritance t
      org-use-speed-commands t
      org-speed-commands (nconc org-speed-commands
                                '(("User commands") ("S" . widen) ("d" . org-deadline)))
      org-startup-with-inline-images t
      ;; don't show scheduled tasks in the TODO view of the agenda
      org-agenda-todo-ignore-scheduled nil))

  (defun org-image-link (protocol link _description)
    "Interpret LINK as base64-encoded image data."
    (cl-assert (string-match "\\`img" protocol) nil
       "Expected protocol type starting with img")
    (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
      (cl-assert buf nil
     "Download of image \"%s\" failed." link)
      (with-current-buffer buf
    (goto-char (point-min))
    (re-search-forward "\r?\n\r?\n")
    (buffer-substring-no-properties (point) (point-max)))))

  (use-package orgalist)

  (add-hook 'org-src-mode-hook
    #'(lambda ()
    (hack-dir-local-variables-non-file-buffer)))

  (setq org-export-docbook-xslt-proc-command "xsltproc --output %o %s %i")
  (setq org-export-docbook-xslt-proc-command "")

  (eval-when-compile
    (defvar org-agenda-mode-map))

  (add-hook 'org-agenda-mode-hook
    #'(lambda ()
    (define-key org-agenda-mode-map (kbd ">") 'org-agenda-remove-restriction-lock)
    (define-key org-agenda-mode-map (kbd "M") 'org-google-calendar-sync)))

  (use-package htmlize)

  (use-package org-protocol :straight nil :ensure nil)
  (use-package ox-md :straight nil :ensure nil)
  (use-package ox-publish :straight nil :ensure nil)
  (use-package ox-taskjuggler :straight nil :ensure nil)
  (use-package ox-freemind :straight nil :ensure nil)
  (use-package ox-icalendar :straight nil :ensure nil)

  (use-package ox-reveal
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))

  (setq
   org-agenda-exporter-settings '((ps-number-of-columns 2)
          (ps-landscape-mode t)
          (org-agenda-add-entry-text-maxlines 5)
          (htmlize-output-type 'css)))

  (defun org-repair-property-drawers ()
    "Fix properties drawers in current buffer.
   Ignore non Org buffers."
    (when (eq major-mode 'org-mode)
      (org-with-wide-buffer
       (goto-char (point-min))
       (let ((case-fold-search t)
     (inline-re (and (featurep 'org-inlinetask)
         (concat (org-inlinetask-outline-regexp)
             "END[ \t]*$"))))
     (org-map-entries
      (lambda ()
    (unless (and inline-re (org-looking-at-p inline-re))
      (save-excursion
    (let ((end (save-excursion (outline-next-heading) (point))))
      (forward-line)
      (when (org-looking-at-p org-planning-line-re) (forward-line))
      (when (and (< (point) end)
         (not (org-looking-at-p org-property-drawer-re))
         (save-excursion
           (and (re-search-forward org-property-drawer-re end t)
            (eq (org-element-type
             (save-match-data (org-element-at-point)))
            'drawer))))
        (insert (delete-and-extract-region
         (match-beginning 0)
         (min (1+ (match-end 0)) end)))
        (unless (bolp) (insert "\n"))))))))))))
#+END_SRC



** Org Babel
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ob-async)
  (use-package ob-sql-mode)
  (use-package restclient)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R          . t)
     (emacs-lisp . t)
     (js         . t)
     (lisp       . t)
     (plantuml   . t)
     (python     . t)
     (shell      . t)
     (sql        . t)
     (sql-mode   . t)))

  ;; (org-babel-lob-ingest "~/Dropbox/emacs/emacs24/elisp/emacs24.Babel.org")

  (setq org-structure-template-alist '(("a" . "export ascii")
               ("c" . "center")
               ("C" . "comment")
               ("e" . "example")
               ("E" . "export")
               ("h" . "export html")
               ("l" . "export latex")
               ("q" . "quote")
               ("s" . "src")
               ("v" . "verse")))
  ;; (add-to-list 'org-structure-template-alist '("el" . "#+BEGIN_SRC emacs-lisp :tangle yes :eval never\n ?\n#+END_SRC"))
  ;; (add-to-list 'org-structure-template-alist '("py" . "#+BEGIN_SRC python :results output :exports both :prologue (progn (setenv \"PYENV_VERSION\" \"scheduler-as-a-service-3.6.1\") \"\") :eval never\n ?\n#+END_SRC"))
  ;; (add-to-list 'org-structure-template-alist '("rana" . "#+BEGIN_SRC R :results output :exports both :cache yes :eval never\n  library(nbs.analysis)\n  ?\n#+END_SRC"))

  (setq org-babel-R-command "/usr/local/bin/R --slave --no-save"
    org-html-keep-old-src t
    org-babel-default-inline-header-args '((:session . "none")
               (:cache . "yes")
               (:eval . "never")
               (:exports . "both")
               (:tangle . "yes"))
    org-babel-default-header-args '((:session . "none")
            (:cache . "yes")
            (:eval . "never")
            (:exports . "both")
            (:tangle . "yes")))


#+END_SRC


* Helm
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-file (expand-file-name "emacs24.helm.org" user-emacs-directory))
  (helm-mode 1)
 #+END_SRC


* Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes

(org-babel-load-file (expand-file-name "emacs24.smartparens.org" user-emacs-directory))

 #+END_SRC


* Smartscan
 #+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartscan)
#+END_SRC


* Rainbow Delimiters
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :commands (rainbow-delimiters-mode rainbow-delimiters-mode-enable
                                       rainbow-delimiters-mode-disable)
    :config
    (face-spec-set 'rainbow-delimiters-depth-1-face
                   '((t :foreground "#e2e2e2")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-2-face
                   '((t :foreground "#e1ffe1")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-3-face
                   '((t :foreground "#ffdfbf")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-4-face
                   '((t :foreground "#efefff")) 'face-defface-spec))

#+END_SRC



* Other Packages

** Auto-compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-compile
    :config
    (auto-compile-on-load-mode 1)
    (auto-compile-on-save-mode 1))

 #+END_SRC


** Auto-revert
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package autorevert :ensure nil
    :diminish (auto-revert-mode . " ⎌"))
#+END_SRC


** Backup each save
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun backup-each-save-filter (filename)
    (let ((ignored-filenames
           '("^/tmp" "semantic.cache$" "\\sv$"  "\\.emacs-places$" "\\.gpg$"
             "\\.recentf$" ".newsrc\\(\\.eld\\)?"))
          (matched-ignored-filename nil))
      (mapc
       (lambda (x)
         (when (string-match x filename)
           (setq matched-ignored-filename t)))
       ignored-filenames)
      (not matched-ignored-filename)))

  (use-package backup-each-save
    :config
    (setq backup-each-save-remote-files t
          backup-each-save-filter-function 'backup-each-save-filter
          backup-directory-alist `(("." . ,(expand-file-name "emacs-backups" user-emacs-directory)))
          backup-by-copying t
          delete-old-versions t
          kept-new-versions 25
          kept-old-versions 1
          vc-make-backup-files t
          version-control t))

 #+END_SRC


** Browse at remote
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package browse-at-remote
    :bind (("s-b" . browse-at-remote)))

 #+END_SRC


** Column Number Mode
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; column-number-mode
  (column-number-mode t)

#+END_SRC


** Comint
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package comint :straight nil :ensure nil)

 #+END_SRC


** Company-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :bind (("\M-\t" . company-complete))
    :diminish (company-mode . " 🕴")
    :config
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
 #+END_SRC


** compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq clean-compile-command "say \"No clean compile command set\"")
  (defun conornash/compile-clean-func ()
    "This function does a clean compile."
    (interactive)
    (setq-local original-compile-command compile-command)
    (compile clean-compile-command)
    (setq-local compile-command original-compile-command))

  (global-set-key (kbd "<f5>") 'compile)
  (global-set-key (kbd "<C-f5>") 'compile)
  (global-set-key (kbd "<M-f5>") 'conornash/compile-clean-func)
 #+END_SRC


** CSV Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package csv-mode
    :mode "\\.csv\\'" "\\.psv\\'" "\\.tsv\\'"
    :config
    (setq csv-separators '("," "\t" "|")))

  (add-hook 'csv-mode-hook
            #'(lambda ()
               (setq-local isearch-lazy-highlight nil)
               (hl-line-mode 1)))
#+END_SRC


** cua-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (cua-mode t)
  (setq cua-enable-cua-keys nil
        cua-delete-selection nil
        delete-active-region nil)
  (delete-selection-mode -1)

 #+END_SRC


** Dash
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package dash-at-point
  ;;   :bind (("C-c C-d" . dash-at-point)))
 #+END_SRC


** dbt
#+begin_src emacs-lisp :tangle yes

  (setq dbt-log-highlights
        '(("^[0-9]+-[0-9]+-[0-9]+ [.0-:]+" . font-lock-function-name-face)
          ("[0-9]+-[0-9]+-[0-9]+ [.0-:]+ \\([^:]+\\)" . (1 font-lock-constant-face))
  ))


  (define-derived-mode dbt-log-mode fundamental-mode "dbt log"
    "major mode for editing dbt-log language code."
    (setq font-lock-defaults '(dbt-log-highlights)))

  ;; (use-package dbt-log-mode
  ;;   :straight nil
  ;;   :ensure nil
  ;;   :mode "\\.dbt.log'"
  ;;   )

#+end_src

** Dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ls-lisp
    :straight nil
    :ensure nil)

  (use-package dired
    :ensure nil
    :straight nil
    :bind (("C-x C-j" . dired-jump)
           ("C-x M-f" . find-name-dired))

    :config
    (setq ls-lisp-use-insert-directory-program nil
          dired-dwim-target t
          dired-listing-switches "-alh")

    (add-hook 'dired-mode-hook
              #'(lambda ()
                  (hl-line-mode 1)))

    (defun dired-open-file ()
      "In dired, open the file named on this line."
      (interactive)
      (let* ((file (dired-get-filename nil t)))
        (message "Opening %s..." file)
        (async-shell-command (format "open \"%s\"" file))
        (message "Opening %s done" file)))

    (defun dired-back-to-top ()
      (interactive)
      (goto-char (point-min))
      (dired-next-line 4))

    (defun dired-jump-to-bottom ()
      (interactive)
      (goto-char (point-max))
      (dired-next-line -1))

    (define-key dired-mode-map (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
    (define-key dired-mode-map (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
    (define-key dired-mode-map (kbd "s-o") 'dired-open-file)

    )

  ;; (setq diredp-hide-details-initially-flag nil
  ;;       diredp-bind-problematic-terminal-keys nil)

  ;; (use-package dired+
  ;;   ;; :ensure nil
  ;;   :config
  ;;   (setq diredp-hide-details-toggled nil))

 #+END_SRC


** Direnv
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; direnv
  (org-babel-load-file (expand-file-name "emacs24.direnv.org" user-emacs-directory))
#+END_SRC


** Docker
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package docker
    :bind (("<f7>" . docker-containers)
           ("<C-f7>" . docker-images)))
  (use-package docker-tramp)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+END_SRC


** Dockerfile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dockerfile-mode
    :mode "Dockerfile\\'")

  (add-hook 'dockerfile-mode-hook
            #'(lambda ()
                (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                ))

 #+END_SRC


** Edebug
#+BEGIN_SRC emacs-lisp :tangle yes
(setq edebug-trace t
      edebug-save-windows nil)

 #+END_SRC


** Ediff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ediff
    :ensure nil
    :bind (("<C-f11>" . ediff)
           ("<M-f11>" . ediff-buffers)
           ("<C-M-f11>" . ediff-regions-wordwise)
           ("<f11>" . ediff-show-registry))

    :config
    (defun ediff-copy-both-to-C ()
      (interactive)
      (ediff-copy-diff ediff-current-difference nil 'C nil
                       (concat
                        (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                        (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
    (defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
    (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)

    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain))


 #+END_SRC


** emojify
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package emojify)
  ;; ;; NEXTACTION: Inhibit emojify mode for certain buffers
  ;; ;; https://github.com/iqbalansari/emacs-emojify#configuring-the-buffers-where-emojify-mode-is-enabled
  ;; (global-emojify-mode -1)

 #+END_SRC


** Enable case-region
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(global-set-key (kbd "M-c") 'capitalize-word)
(global-set-key (kbd "M-l") 'downcase-word)
(global-set-key (kbd "M-u") 'upcase-word)
 #+END_SRC


** Enable narrowing
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)

 #+END_SRC


** Encryption
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; EasyPG
  (use-package epa-file
    :ensure nil
    :straight nil)
  (epa-file-enable)

 #+END_SRC


** Expand region
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :bind (("M-#" . er/expand-region)
           ("C-M-#" . er/contract-region))
    :config
    ;; Remove er/mark-word
    (setq er/try-expand-list '(er/mark-symbol
                               er/mark-symbol-with-prefix er/mark-next-accessor
                               er/mark-method-call er/mark-inside-quotes
                               er/mark-outside-quotes er/mark-inside-pairs
                               er/mark-outside-pairs er/mark-comment er/mark-url er/mark-email
                               er/mark-defun)))
 #+END_SRC


** Find file at point
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs"
        save-abbrevs nil
        hippie-expand-try-functions-list
        '(try-expand-dabbrev-all-buffers
          try-complete-file-name
          try-complete-file-name-partially
          try-complete-lisp-symbol
          try-complete-lisp-symbol-partially
          try-expand-all-abbrevs
          try-expand-dabbrev
          try-expand-dabbrev-from-kill
          try-expand-dabbrev-visible
          try-expand-line
          try-expand-list
          yas-hippie-try-expand))

 #+END_SRC


** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flycheck
  :bind (("s-[" . flycheck-previous-error)
         ("s-]" . flycheck-next-error))
  )
#+END_SRC


** FontAwesome
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Requires font to be downloaded from http://fontawesome.io/
  (use-package fontawesome)

#+END_SRC


** Guide-key
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package guide-key
    :diminish guide-key-mode
    :config
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v" "C-x j" "<C-f1>" "C-;" "C-c" "<f2>")
          guide-key/idle-delay 0.5
          guide-key/recursive-key-sequence-flag t))
  (guide-key-mode 1)


#+END_SRC


** Help-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'help-mode-hook #'(lambda()
                              (define-key help-mode-map (kbd "b") 'help-go-back)
                              (define-key help-mode-map (kbd "f") 'help-go-forward)))

 #+END_SRC


** Helpful package
This is a system that makes `helm-apropos` more useful
#+BEGIN_SRC emacs-lisp :tangle yes :eval never
  (use-package helpful
    :commands (helpful-function helpful-variable)
    :bind (("C-h k" . helpful-key)))

#+END_SRC


** hmac
#+BEGIN_SRC emacs-lisp :tangle yes :eval never
  (use-package hmac
    :commands (hmac)
    )



#+END_SRC


** hungry-delete
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :diminish (hungry-delete-mode . " 𐑙")
    :config
    (setq hungry-delete-chars-to-skip " \t\f\v")
    (defalias 'delete-backward-char 'hungry-delete-backward "To delete a single character provide a numeric prefix.")
    (defalias 'delete-forward-char 'hungry-delete-forward "To delete a single character provide a numeric prefix."))
  (global-hungry-delete-mode 1)
 #+END_SRC


** Hy
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package hy-mode)
  (add-hook 'hy-mode-hook
            #'(lambda ()
                (pyenv-mode 1)
                (rainbow-mode 1)
                (turn-on-smartparens-strict-mode)
                (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                (setq tab-width 4
                      ;; jedi:complete-on-dot t              ; optional
                      ;; flycheck-checker 'python-flake8
                      jit-lock-defer-time 0.25)
                (define-key hy-mode-map (kbd "M-\\") 'switch-to-lisp)
                ))

  (eval-when-compile
    (defvar inferior-lisp-mode-map))
  (add-hook 'inferior-lisp-mode-hook
            #'(lambda ()
                (define-key inferior-lisp-mode-map (kbd "C-M-p") 'backward-list)
                (define-key inferior-lisp-mode-map (kbd "C-M-n") 'forward-list)))

#+END_SRC


** iBuffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :ensure nil
    :bind (("<f8>" . ibuffer) ("C-x C-b" . ibuffer)))

 #+END_SRC


** isearch
#+BEGIN_SRC emacs-lisp :tangle yes
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))

(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
(define-key isearch-mode-map (kbd "<backspace>") 'conor-mydelete)
(define-key isearch-mode-map (kbd "M-o") 'helm-swoop-from-isearch)
(define-key isearch-mode-map (kbd "C-<return>") 'isearch-exit-other-end)

 #+END_SRC


** Jinja2
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package jinja2-mode)
#+END_SRC



** jq-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package jq-mode
    :ensure-system-package jq
    :mode "\\.json\\'" "\\.jsonl\\'")

 #+END_SRC


** JSON
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package origami
    :config
    (define-key origami-mode-map (kbd "C-M-n") 'origami-next-fold)
    (define-key origami-mode-map (kbd "C-M-p") 'origami-previous-fold)
    (define-key origami-mode-map (kbd "C-M-b") 'origami-backward-fold-same-level)
    (define-key origami-mode-map (kbd "C-M-f") 'origami-forward-fold-same-level)

    (defun origami-yaml-parser (create)
      (lambda (content)
        (with-temp-buffer
          (insert content)
          (yaml-mode)
          (defun yaml-subparser (beg end)
            "find all fold block between beg and end."
            (goto-char beg)
            (let (acc)
              ;; iterate all same level children.
              (while (and (beginning-of-defun -1) (<= (point) end)) ;; have children between beg and end?
                (let* ((new-beg (point))
                       (new-offset (progn (search-forward-regexp ":" nil t) (- (point) new-beg)))
                       (new-end (progn (end-of-defun) (point))))
                  (setq acc (cons (funcall create new-beg new-end new-offset
                                           (yaml-subparser new-beg new-end))
                                  acc))
                  (goto-char new-end)))
              acc))
          (yaml-subparser (point-min) (point-max)))))

    )
  (use-package json-mode
    :after origami
    :mode "\\.json\\'" "\\.jsonl\\'"
    :config
    (setq json-reformat:indent-width 2))

  (add-hook 'json-mode-hook
            #'(lambda ()
                (origami-mode 1)
                (smartparens-strict-mode 1)
                (define-key json-mode-map (kbd "C-M-\\") 'json-pretty-print)
                (define-key origami-mode-map (kbd "<M-tab>") 'origami-recursively-toggle-node)
                (define-key origami-mode-map (kbd "<S-tab>") 'origami-toggle-all-nodes)
                ))


 #+END_SRC


** Keyfreq
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package keyfreq
  :config
  (setq keyfreq-excluded-commands
        '(self-insert-command
          keyboard-quit
          abort-recursive-edit
          )
        keyfreq-file (expand-file-name "keyfreq" user-emacs-directory))
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))


#+END_SRC


** Keychain
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package keychain-environment)
  (keychain-refresh-environment)


#+END_SRC


** kill ring
#+BEGIN_SRC emacs-lisp :tangle yes
(setq kill-ring-max 200)

 #+END_SRC


** Line numbers
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; This should be set regardless of using the nlinum package
  ;; `goto-line-with-feedback' depends on it
  (setq line-number-display-limit-width 9000000)

  (use-package nlinum
    :commands (global-nlinum-mode nlinum-mode))

  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
        (progn
          (nlinum-mode 1)
          (goto-char (point-min))
          (forward-line (1- (read-number "Goto line: ")))
          (nlinum-mode -1))))

#+END_SRC


** LSP (Language Server Protocol)
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; (setq default-docker-container-name "lsp-container")

  (use-package lsp-mode
    :hook ((python-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands (lsp lsp-deferred)

    :config
    (setq
     lsp-diagnostics-provider :flycheck
     ;; lsp-pyls-plugins-pycodestyle-enabled t
     ;; lsp-pyls-plugins-pylint-args '("--disable=W0301,W0312,C0103,W191,E127,E1102,E203,C0326,W1201")
     )
    )

  (use-package lsp-docker)
  ;; This is difficult to configure and sometimes breaks randomly

  (require 'lsp-docker)
  (defvar lsp-docker-client-packages
    '(lsp-css lsp-clients lsp-bash lsp-go lsp-pylsp lsp-html lsp-typescript
              lsp-terraform lsp-clangd))
  (setq lsp-docker-client-configs
        '((:server-id bash-ls :docker-server-id bashls-docker :server-command "bash-language-server start")
          (:server-id clangd :docker-server-id clangd-docker :server-command "clangd")
          (:server-id css-ls :docker-server-id cssls-docker :server-command "css-languageserver --stdio")
          ;; (:server-id dockerfile-ls :docker-server-id dockerfilels-docker :server-command "docker-langserver --stdio")
          (:server-id gopls :docker-server-id gopls-docker :server-command "gopls")
          (:server-id html-ls :docker-server-id htmls-docker :server-command "html-languageserver --stdio")
           (:server-id pylsp :docker-server-id pylsp-docker :server-command "pylsp" :docker-image-id "martini97/lsp-docker-langservers" :docker-container-name "martini97-lsp-pylsp")
          ;; (:server-id pyls :docker-server-id pyls-docker :server-command "pyls")
          ;; (:server-id ts-ls :docker-server-id tsls-docker :server-command "typescript-language-server --stdio")
          ))
  (require 'lsp-docker)

  (setq lsp-keymap-prefix "s-l")
  (lsp-docker-init-clients
   :path-mappings '(("/Users/conornash/Dropbox/Documents" . "/projects"))
   :client-packages lsp-docker-client-packages
   :client-configs lsp-docker-client-configs)

  ;; optionally
  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    (add-hook 'lsp-ui-doc-frame-mode-hook
              #'(lambda ()
                  (setq-local window-number-skip t))))

  (use-package helm-lsp
    :commands helm-lsp-workspace-symbol
    :config
    (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))

  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optional if you want which-key integration
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC



** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :commands magit-status
    :bind (("<f6>" . magit-status))
    :config
    (add-hook 'with-editor-mode-hook
              #'(lambda ()
                  (orgalist-mode 1)))

    (setq magit-push-always-verify nil
          magit-diff-refine-hunk t
          magit-diff-use-overlays nil
          magit-revision-headers-format "Author:     %aN <%aE>
  AuthorDate: %ad
  Commit:     %cN <%cE>
  CommitDate: %cd
  Signature:  %GG
  "
          magit-status-sections-hook '(magit-insert-status-headers
                                       magit-insert-merge-log
                                       magit-insert-rebase-sequence
                                       magit-insert-am-sequence
                                       magit-insert-sequencer-sequence
                                       magit-insert-bisect-output
                                       magit-insert-bisect-rest
                                       magit-insert-bisect-log
                                       magit-insert-untracked-files
                                       magit-insert-unstaged-changes
                                       magit-insert-staged-changes
                                       magit-insert-stashes
                                       magit-insert-unpulled-from-upstream
                                       magit-insert-unpulled-from-pushremote
                                       magit-insert-unpushed-to-upstream
                                       magit-insert-unpushed-to-pushremote))
    )

  (use-package forge
    :after magit)
  ;; (use-package magit-todos
  ;;   :after magit
  ;;   :config
  ;;   (-map (lambda (elem)
  ;;           (add-to-list 'magit-todos-keywords-list elem))
  ;;         '("NEXTACTION" "INREVIEW" "DONE" "TRANSFERRED" "CANCELLED" "DUPLICATE")))
 #+END_SRC


** Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :mode "\\.md\\'")

 #+END_SRC


** Multiple cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :bind (("C-M-@" . mc/mark-previous-like-this)
           ("M-@" . mc/mark-next-like-this)
           ("s-a" . mc/edit-beginnings-of-lines)
           ("s-c" . mc/add-multiple-cursors-to-region-lines)
           ("s-e" . mc/edit-ends-of-lines))

    :config
    (setq mc/list-file (expand-file-name "emacs24.mc.el" user-emacs-directory)
          mc/insert-numbers-default 1))

 #+END_SRC


** Nov.el
#+begin_src emacs-lisp :tangle yes :eval never
  (use-package olivetti
    :config
    (setq olivetti-body-width 0.85))

  (use-package nov
    :mode ("\\.epub\\'" . nov-mode))

  (add-hook 'nov-mode-hook
            #'(lambda ()
                (olivetti-mode 1)
                (define-key nov-mode-map (kbd "u") 'nov-goto-toc)
                (set-window-margins (current-buffer) 1 1)))
#+end_src


** Paradox Package Manager
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paradox
    :commands paradox-list-packages
    :init
    (setq paradox-automatically-star t
          paradox-column-width-package 25
          ;; Auth token in private.org
          paradox-execute-asynchronously t))

 #+END_SRC


** Polymode
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Taken from:
  ;; (use-package dbt-mode
  ;;   :straight (:type git :host github :repo "CyberShadow/dbt-mode")
  ;;   ;; Customize `sql-product' to set the flavor of the SQL syntax.
  ;;   ;; :custom (sql-product 'mariadb)
  ;;   )

  ;; (setq polymode-prefix-key (kbd "s-n"))
  (use-package polymode
    :mode ("\.sql$" . poly-dbt-mode)
    )

  (define-hostmode dbt/sql-hostmode
    :mode 'sql-mode)

  (define-innermode dbt/sql-jinja2-innermode
    :mode 'jinja2-mode
    :head-matcher "{[%{][+-]?"
    :tail-matcher "[+-]?[%}]}"
    :head-mode 'body
    :tail-mode 'body
    :init-functions '((lambda (_)
                        (setq-local indent-line-function ' jinja2-indent-line))))

  ;; Comment blocks don't seem to work very well with jinja2/polymode,
  ;; work around this by defining an inner mode just for the comments.
  (define-innermode dbt/sql-jinja2-comments-innermode
    :head-matcher "{#[+-]?"
    :tail-matcher "[+-]?#}"
    :head-mode 'body
    :tail-mode 'body
    :adjust-face 'font-lock-comment-face
    :head-adjust-face 'font-lock-comment-face
    :tail-adjust-face 'font-lock-comment-face
    )

  (define-polymode poly-dbt-mode
    :hostmode 'dbt/sql-hostmode
    :innermodes '(dbt/sql-jinja2-comments-innermode
                  dbt/sql-jinja2-innermode))

  ;; (add-to-list 'auto-mode-alist
  ;;              '("/\\(dbt\\|queries\\|macros\\|dbt_modules\\)/.*\\.sql\\'" . dbt-mode))

 #+END_SRC


** Powershell
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package powershell)

 #+END_SRC


** Prettify
#+BEGIN_SRC emacs-lisp :tangle yes

  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-unprettify-at-point 'right-edge)

 #+END_SRC


** rainbow-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
    :diminish (rainbow-mode . " 🌈"))
 #+END_SRC


** RealGUD
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package realgud
    :commands (realgud:cmd-eval
    realgud:zshdb-customize realgud:ipdb-remote realgud:terminate
    realgud:window-bt-undisturb-src realgud:cmd-break
    realgud:trepan-goto-syntax-error-line realgud:cmd-delete
    realgud:unload-features realgud:remake realgud:rdebug-customize
    realgud:cmd-frame realgud:trepanjs-reset
    realgud:trepan-goto-control-frame-line realgud:trepan2-customize
    realgud:cmd-newer-frame realgud:gdb-reset
    realgud:trepanjs-goto-syntax-error-line realgud:reload-features
    realgud:cmd-enable realgud:send-input realgud:bashdb-customize
    realgud:cmd-until realgud:cmd-terminate
    realgud:perl-goto-errmsg-line realgud:backtrace-init
    realgud:goto-loc-hist-9 realgud:goto-loc-hist-8
    realgud:goto-loc-hist-7 realgud:goto-loc-hist-6
    realgud:goto-loc-hist-5 realgud:goto-loc-hist-4
    realgud:cmd-eval-dwim realgud:gub-customize realgud:pdb
    realgud:nodejs-customize realgud:ipdb-customize realgud:cmd-next
    realgud:jdb realgud:nodejs-reset realgud:cmd-continue
    realgud:pdb-customize realgud:jdb-goto-control-frame-line
    realgud:ipdb-backend-complete realgud:backtrace-describe
    realgud:trepan3k-delayed realgud:jdb-goto-syntax-error-line
    realgud:trepanjs realgud:follow-event realgud:cmd-step
    realgud:cmd-repeat-last realgud:zshdb realgud:ipdb
    realgud:track-set-debugger realgud:pdb-remote
    realgud:cmd-eval-region realgud:reset realgud:loc-describe
    realgud:track-from-region realgud:kshdb-customize
    realgud:trepanpl-track-mode realgud:cmd-jump
    realgud:gub-goto-location realgud:goto-lang-backtrace-line
    realgud:cmd-next-no-arg realgud:follow-point
    realgud:perldb-customize realgud:pdb-delayed
    realgud:rspec-goto-backtrace-line realgud:flake8-goto-msg-line
    realgud:gdb-pid realgud:goto-debugger-backtrace-line
    realgud:cmd-finish realgud:ruby-goto-dollar-bang-line
    realgud:info-mode realgud:pytest-goto-errmsg-line realgud:cmd-quit
    realgud:trepan realgud:remake-customize realgud:trepan\.pl
    realgud:window-bt realgud:jdb-track-mode
    realgud:srcbuf-info-describe realgud:ruby-goto-backtrace-line
    realgud:goto-maven-errmsg-line realgud:bashdb
    realgud:track-mode-enable realgud:remove-ansi-schmutz
    realgud:cmdbuf-follow-buffer realgud:rails-goto-backtrace-line
    realgud:perldb realgud:follow realgud:cmd-shell
    realgud:rubinius-goto-Xagent-backtrace-line
    realgud:trepanpl-goto-syntax-error-line realgud:gdb-pid-associate
    realgud:cmd-backtrace realgud:track-mode-disable realgud:gdb
    realgud:trepanpl-reset realgud:tooltip-eval realgud:gdb-customize
    realgud:cmd-disable realgud:cmdbuf-info-describe
    realgud:trepan2-delayed realgud:gub-goto-panic-location
    realgud:cmd-restart realgud:goto-debugger-loc-line
    realgud:trepanpl-customize realgud:cmd-kill
    realgud:terminate-srcbuf realgud:trepan2 realgud:gdb-track-mode
    realgud:rdebug realgud:cmd-older-frame realgud:trepan3k
    realgud:cmd-clear realgud:nodejs realgud:cmd-step-no-arg
    realgud:jdb-customize realgud:trepan3k-customize
    realgud:trepanjs-customize realgud:trepan-customize realgud:kshdb
    realgud:perldb-reset)
    :config
    (setq realgud:ipdb-command-name "python -m ipdb"))

 #+END_SRC


** Recentf
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package recentf
  :config
  (setq recentf-max-saved-items nil))

(require 'prog-mode)
 #+END_SRC


** Restclient
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :config
    (use-package restclient-helm)
    (use-package ob-restclient
      :config
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((restclient . t)))))

  (add-hook 'restclient-mode-hook
            #'(lambda ()
                (json-pretty-print-buffer-ordered)
                (turn-on-smartparens-strict-mode)))


 #+END_SRC


** Shell
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'sh-mode-hook
            #'(lambda()
               (define-key sh-mode-map (kbd "C-\\") 'shell-eval-line)))

  (defun term-toggle-mode ()
    (interactive)
    (if (term-in-line-mode)
        (term-char-mode)
      (term-line-mode)))

  (use-package term
    :commands (term)
    :ensure nil
    :config
    (setq explicit-shell-file-name "/usr/local/bin/bash"))
 #+END_SRC


** Show-paren
#+BEGIN_SRC emacs-lisp :tangle yes
(show-paren-mode 1)
#+END_SRC


** SSH mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ssh-config-mode)
  (add-to-list 'auto-mode-alist '(".ssh/config\\'"       . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("sshd?_config\\'"      . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("known_hosts\\'"       . ssh-known-hosts-mode))
  (add-to-list 'auto-mode-alist '("authorized_keys2?\\'" . ssh-authorized-keys-mode))
  (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
  (add-hook 'ssh-config-mode-hook 'delete-trailing-whitespace)

 #+END_SRC


** Subword mode
#+BEGIN_SRC emacs-lisp :tangle yes

(setq subword-forward-regexp "\\W*\\(\\([[:upper:]]*\\(\\W\\)?\\)[[:lower:][:digit:]]*[_.-]*\\)"
      subword-backward-regexp "\\(\\(\\W\\|[[:lower:][:digit:]]\\)\\([[:upper:]]+\\W*\\)\\|\\W\\w+\\)")


 #+END_SRC


** Tabs defaults
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq default-tab-width 4
        tab-width 4)

  (setq-default indent-tabs-mode nil
                tab-width 4)

 #+END_SRC


** Toml
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package toml)
 #+END_SRC


** Tramp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tramp
    :init
    (setq tramp-use-ssh-controlmaster-options t)
    :config
    (setq tramp-default-method "ssh"
          tramp-connection-timeout 5
          tramp-use-ssh-controlmaster-options t
          remote-file-name-inhibit-cache nil)
    (defalias 'tcac 'tramp-cleanup-all-connections))
 #+END_SRC


** Terraform
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package terraform-mode)
 #+END_SRC


** Undo Fu
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-fu
    :bind (("C-/" . undo-fu-only-undo)
           ("C-?" . undo-fu-only-redo)))

 #+END_SRC

** Uniquify
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package uniquify
    :ensure nil
    :straight nil
    :config
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

 #+END_SRC


** VC settings
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vc
  :config
  (setq vc-follow-symlinks t))

 #+END_SRC


** Visual line mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-line-mode
    :straight nil
    :ensure nil
    :hook ((markdown-mode org-mode) . visual-line-mode)
    :diminish
    (visual-line-mode . " "))
 #+END_SRC


** visual-regexp
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package visual-regexp
      :bind (("s-:" . query-replace-regexp)
             ("s-;" . vr/replace)))
 #+END_SRC


** w3m
#+BEGIN_SRC emacs-lisp :tangle yes
;;(setq browse-url-browser-function 'w3m-browse-url)
(setq browse-url-browser-function 'browse-url-default-macosx-browser)

 #+END_SRC


** web-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :mode "\\.html\\'" "\\.php\\'" "\\.tpl\\'" "\\.mustache\\'" "\\.erb\\'" "\\.jinja\\'" "\\.jinja2\\'" "\\.twig\\'"
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-engine-detection t
          ;; ( web-mode-indent-style 2)
          web-mode-style-padding 1
          web-mode-script-padding 1
          web-mode-block-padding 0))

  (add-hook 'web-mode-hook
            #'(lambda ()
               (rainbow-mode 1)
               (turn-on-smartparens-strict-mode)))
 #+END_SRC


** pulse
#+BEGIN_SRC emacs-lisp :tangle yes

  (defun conor-pulse-hook (&rest arg)
    (pulse-line-hook-function))

  (use-package pulse
    :ensure nil
    :config
    (setq
     pulse-command-advice-flag  	t
     pulse-iterations           	25
     pulse-delay                	0.05)
    (face-spec-set 'pulse-highlight-start-face	'((((class color) (background dark))
                                                     (:background "#AAAAAA"))
                                                    (((class color) (background light))
                                                     (:background "#FFFFFF"))))
    (face-spec-set 'pulse-highlight-face '((((class color) (background dark))
                                            (:background "#AAAAAA"))
                                           (((class color) (background light))
                                            (:background "#FFFFFF"))))
    (dolist (command '(scroll-up
                       scroll-down
                       recenter-top-bottom
                       other-window))
      (advice-add command :filter-return #'conor-pulse-hook)))





 #+END_SRC



** Buffer/Window/Frame navigation
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq split-height-threshold 140
        split-width-threshold 140)

  (use-package buffer-move
    :bind (("<C-s-down>" . buf-move-down)
           ("<C-s-left>" . buf-move-left)
           ("<C-s-right>" . buf-move-right)
           ("<C-s-up>" . buf-move-up)))

  (use-package window-number)
  (window-number-meta-mode 1)

  (defun back-window (&optional arg)
    (interactive "P")
    (other-window -1))

  (defun my/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
        (switch-to-next-buffer)))

  (defun my/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))

  (global-set-key (kbd "C-\]") 'other-window)
  (global-set-key (kbd "C-M-\]") 'back-window)

  (global-set-key (kbd "s-2") 'my/vsplit-last-buffer)
  (global-set-key (kbd "s-3") 'my/hsplit-last-buffer)

  (use-package transpose-frame
    :bind (("C-<" . rotate-frame-anticlockwise)
           ("C->" . rotate-frame-clockwise)))

  ;; (defun conornash/scroll-up (prefix)
  ;;   (interactive "p")
  ;;   (previous-line prefix)
  ;;   (scroll-lock-previous-line prefix))

  ;; (defun conornash/scroll-down (prefix)
  ;;   (interactive "p")
  ;;   (next-line prefix)
  ;;   (scroll-lock-next-line prefix))

  ;; (global-set-key (kbd "s-<down>") 'conornash/scroll-down)
  ;; (global-set-key (kbd "s-<up>") 'conornash/scroll-up)

  (global-set-key (kbd "<M-f8>") 'kill-buffer-and-window)
  (global-set-key (kbd "C-`") 'other-frame)
  (global-set-key (kbd "C-s-]") 'other-frame)
  (global-set-key (kbd "s-0") 'delete-window)
  (global-set-key (kbd "s-1") 'delete-other-windows)
  (global-set-key (kbd "s-\\") 'other-frame)
#+END_SRC



** Man pages
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package woman
    :commands (helm-man-woman))

  (add-hook 'woman-mode-hook
            #'(lambda ()
               (subword-mode -1)))
#+END_SRC


** vterm
Currently causes Emacs in terminal to segfault
#+BEGIN_SRC  emacs-lisp :tangle yes
  ;; (use-package vterm
  ;;   :commands (vterm)
  ;;   :config
  ;;   (add-hook 'vterm-mode-hook
  ;;             #'(lambda ()
  ;;                (define-key vterm-mode-map (kbd "C-y") 'vterm-yank))))
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yafolding
    :config
    (define-key yafolding-mode-map (kbd "<M-tab>") 'yafolding-toggle-element)
    (define-key yafolding-mode-map (kbd "<S-tab>") 'origami-toggle-all-nodes)
    )
  (use-package yaml-mode
    :mode "\\.lookml\\'" "\\.yaml.template\\'" "\\.yaml\\'" "\\.yml\\'")

  (add-hook 'yaml-mode-hook
            #'(lambda ()
                (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                (origami-mode 1)
                (yafolding-mode 1)
                ))


 #+END_SRC


** yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish
    ((yas-minor-mode . " ✀")
     (yas-global-mode . " ✀"))
    :bind (("C-z" . yas-expand))
    :config
    (add-to-list 'yas-snippet-dirs (expand-file-name "snippets" user-emacs-directory)))
  (yas-global-mode 1)

 #+END_SRC


** Whitespace mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace
    :bind (("C-c w" . whitespace-mode))
    :config
    (setq whitespace-display-mappings
          ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
          '(
            (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
            (newline-mark 10 [182 10]) ; 10 LINE FEED
            (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
            )
          whitespace-style '(face tabs spaces trailing space-before-tab::space newline indentation::space indentation indentation::tab empty space-after-tab::space space-mark tab-mark newline-mark)))

 #+END_SRC


** indent-guide
#+begin_src emacs-lisp :tangle yes

  (use-package indent-guide)
  (use-package highlight-indentation)

#+end_src


* Languages
** Elisp functions
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Emacs Lisp
  (org-babel-load-if-exists (expand-file-name "emacs24.elisp.org" user-emacs-directory))

  ;; Hacky functions
  (org-babel-load-if-exists (expand-file-name "emacs24.hacky.org" user-emacs-directory))

#+END_SRC



** ESS / R
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-if-exists (expand-file-name "emacs24.ess.org" user-emacs-directory))
 #+END_SRC



** js2 stuff
#+BEGIN_SRC emacs-lisp :tangle yes
;; (org-babel-load-if-exists (expand-file-name "emacs24.js2.org" user-emacs-directory))

 #+END_SRC


** Lua
#+begin_src emacs-lisp :tangle yes
  (use-package lua-mode
    :interpreter "lua"
    :mode "\\.lua\\'"
    :config
    (setq lua-documentation-function 'eww)
    :hook
    (lua-mode . (lambda ()
                  (set-company-backends-for-lua)
                  (lsp-mode)
                  (turn-on-smartparens-strict-mode)
                  (define-key lua-mode-map (kbd "M-\\") 'lua-show-process-buffer)
                  (define-key lua-mode-map (kbd "C-c C-r") 'lua-send-region)
                  (define-key lua-mode-map (kbd "C-c C-d") 'lua-search-documentation)
                  (define-key lua-mode-map (kbd "C-c C-b") 'lua-send-buffer)
                  (define-key lua-mode-map (kbd "C-|") 'eval-at-cursor)
                  (define-key lua-mode-map (kbd "C-\\") 'lua-print-current-line)
                  (define-key lua-mode-map (kbd "C-M-x") 'lua-send-defun)

                  (define-key lua-mode-map (kbd "C-M-f") 'lua-forward-sexp)
                  (define-key lua-mode-map (kbd "C-M-b") 'lua-backwards-to-block-begin-or-end)))

    :config
    (setq lua-indent-level 4)
    (setq lua-indent-string-contents t)
    (setq lua-prefix-key nil))

  (defun lua-print-current-line ()
    (interactive)
    (save-excursion
      (lua-send-string (buffer-substring (line-beginning-position) (line-end-position)))))

  (use-package company-lua)

  (defun set-company-backends-for-lua()
    "Set lua company backend."
    (setq-local company-backends '(
                                   (
                                    company-lua
                                    company-keywords
                                    company-gtags
                                    company-yasnippet
                                    )
                                   company-capf
                                   company-dabbrev-code
                                   company-files
                                   )))

  (use-package lsp-lua-emmy
    :demand
    :straight nil
    :ensure nil
    :load-path "~/Dropbox/Documents/lsp-lua-emmy"
    :hook (lua-mode . lsp)
    :config
    (setq lsp-lua-emmy-jar-path (expand-file-name "EmmyLua-LS-all.jar" user-emacs-directory))
    )

#+end_src



** Python
 #+BEGIN_SRC emacs-lisp :tangle yes

   (org-babel-load-file (expand-file-name "emacs24.python.org" user-emacs-directory))
#+END_SRC




** PICO-8
#+begin_src emacs-lisp :tangle yes
  (use-package pico8-mode
    :mode "\\.p8\\'"
    :straight nil
    :demand
    :ensure nil
    :load-path "~/Dropbox/Documents/pico8-mode"
    :config
    (setq pico8-documentation-file "/Users/conornash/Library/Application Support/pico-8/pico-8.txt")
    )

#+end_src

** Scheme
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.scheme.org" user-emacs-directory))

#+END_SRC


** Racket
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.racket.org" user-emacs-directory))
#+end_src

** Smalltalk
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shampoo
    :commands (shampoo-connect shampoo-reconnect shampoo-disconnect)
    :mode ( "\\.st\\'" . shampoo-code-mode))

  (add-hook 'shampoo-code-mode-hook
              #'(lambda ()
                 (rainbow-mode 1)
                 (turn-on-smartparens-strict-mode)))

 #+END_SRC


** SQL
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.sql.org" user-emacs-directory))

 #+END_SRC





** Visual Basic
#+begin_src emacs-lisp :tangle yes
  (org-babel-load-if-exists (expand-file-name "emacs24.vb.org" user-emacs-directory))
  (use-package visual-basic-mode
    :mode "\\.frm\\'" "\\.vb6\\'" "\\.vb\\'"
    :ensure nil)
#+end_src


* Gnus
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gnus-directory (expand-file-name "gnus" user-emacs-directory)
        gnus-startup-file (expand-file-name "newsrc.el" gnus-directory)
        gnus-select-method '(nntp "nntp.aioe.org")
        gnus-server-alist '(("archive" nnfolder "archive"
                             (nnfolder-directory (expand-file-name "nnfolder/archive" gnus-directory))
                             (nnfolder-active-file (expand-file-name "nnfolder/archive/active" gnus-directory))
                             (nnfolder-get-new-mail nil)
                             (nnfolder-inhibit-expiry t))))

  ;; Fix for security vulnerability https://lists.gnu.org/archive/html/info-gnu/2017-09/msg00006.html
  (eval-after-load "enriched"
    '(defun enriched-decode-display-prop (start end &optional param)
       (list start end)))

#+END_SRC


* Eshell
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.eshell.org" user-emacs-directory))

 #+END_SRC


* Keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key comint-mode-map "\C-a" 'comint-bol-or-process-mark)
  (define-key query-replace-map (kbd "C-j") 'newline)
  (global-set-key "\C-c\M-d" 'zero-pad)
  (global-set-key "\C-cg" 'goto-line)
  (global-set-key "\M-/" 'hippie-expand)
  (global-set-key (kbd "<M-f9>") 'ffap-next)
  (global-set-key (kbd "C-'") 'add-single-quoted-argument)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C-M-!") 'conornash/shell-command-do-it)
  (global-set-key (kbd "C-M-%") 'query-replace-regexp)
  (global-set-key (kbd "C-M-,") 'previous-buffer)
  (global-set-key (kbd "C-M-.") 'next-buffer)
  (global-set-key (kbd "C-M-\\") 'indent-region)
  (global-set-key (kbd "C-\"") 'add-quoted-argument)
  (global-set-key (kbd "C-c !") 'org-time-stamp-inactive)
  (global-set-key (kbd "C-c C-f") 'ffap-next)
  (global-set-key (kbd "C-c M-g") 'linum-relative-mode)
  (global-set-key (kbd "C-s-SPC") 'insert-char)
  (global-set-key (kbd "C-s-\\") 'uncomment-region)
  (global-set-key (kbd "C-x $") (lambda()(interactive)(insert "€")))
  (global-set-key (kbd "C-x 2") 'my/vsplit-last-buffer)
  (global-set-key (kbd "C-x 3") 'my/hsplit-last-buffer)
  (global-set-key (kbd "M-(") 'nest-outer-round-parens)
  (global-set-key (kbd "M-<down>") 'move-text-down)
  (global-set-key (kbd "M-<up>") 'move-text-up)
  (global-set-key (kbd "M-\\") 'comment-dwim)
  (global-set-key (kbd "M-n") 'iregister-jump-to-next-marker)
  (global-set-key (kbd "M-p") 'iregister-jump-to-previous-marker)
  (global-set-key (kbd "s-!") 'insert-current-timestamp-inactive)
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
  (global-set-key (kbd "s-SPC") 'set-rectangular-region-anchor)
  (global-set-key (kbd "s-k") 'djcb-duplicate-line)
  (global-set-key (kbd "s-q") nil)
  (global-set-key [remap beginning-of-visual-line] 'my/smarter-move-beginning-of-line)
  (global-set-key [remap goto-line] 'goto-line-with-feedback)
  (global-unset-key (kbd "s-p"))
  (global-unset-key (kbd "s-o"))
  (global-unset-key (kbd "s-n"))
  (global-set-key (kbd "<f14>") 'scroll-lock-mode)
#+END_SRC


* Scratch buffer
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; (defun scratch-fortune (file)
  ;;   (fortune-in-buffer t file)
  ;;   (save-current-buffer
  ;;     (set-buffer fortune-buffer-name)
  ;;     (s-concat
  ;;      (replace-regexp-in-string "^[A-Za-z(\"-]" ";; " (buffer-string))
  ;;      "\n\n")))

  ;; (use-package fortune
  ;;   :config
  ;;   (setq fortune-dir "/Users/conornash/Dropbox/Settings/fortunes"
  ;;         initial-scratch-message (scratch-fortune "/Users/conornash/Dropbox/Settings/fortunes/quotes.fortune")))

#+END_SRC


* End of Config

** Back to usual parameters
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; In case another package turns this on
  ;; (setq auto-window-vscroll nil)
  (setq
   debug-on-quit nil
   debug-on-error nil)
#+END_SRC


** Declare functions for the byte-compiler
#+BEGIN_SRC emacs-lisp :tangle yes

  (eval-when-compile
    (mapc
     (lambda (elem) (declare-function elem (find-lisp-object-file-name elem 'defun)))
     '(auto-compile-on-load-mode
       auto-compile-on-save-mode
       ediff-copy-diff
       ediff-get-region-contents
       exec-path-from-shell-initialize
       global-emojify-mode
       global-hungry-delete-mode
       global-undo-tree-mode
       global-undo-tree-mode
       guide-key-mode
       key-chord-define-global
       key-chord-mode
       keyfreq-autosave-mode
       keyfreq-mode
       lua-send-string
       org-babel-load-file
       term-char-mode
       term-in-line-mode
       term-line-mode
       unicode-fonts-setup
       window-number-meta-mode
       yas-global-mode
       ))
    )
#+END_SRC


** Private settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (file-exists-p (expand-file-name "private.org" user-emacs-directory))
    (org-babel-load-if-exists (expand-file-name "private.org" user-emacs-directory)))


#+END_SRC


** Customize
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (cond
   ((file-exists-p custom-file)
    (load custom-file))
   (t
    (write-region "" nil custom-file)))
#+END_SRC


** Fonts
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; unicode-fonts package
  (use-package unicode-fonts
    :config
    (unicode-fonts-setup))

  (set-face-attribute 'font-lock-comment-face nil
                      :weight 'medium
                      :slant 'italic)

  (set-face-attribute 'font-lock-variable-name-face nil
                      :weight 'medium
                      ;; :foreground "#FFB380"
                      :foreground "#FFBF94")

  ;; Requires font to be downloaded from https://www.fontsquirrel.com/fonts/inconsolata
  ;; (set-face-attribute 'default nil
  ;;                     :family "IBM Plex Mono")
  (set-face-attribute 'default nil
                      :height 135
                      :family "Cascadia Code PL")

  ;; (when (functionp 'set-fontset-font)
  ;;   (set-fontset-font "fontset-default"
  ;;                     'unicode
  ;;                     (font-spec :family "Inconsolata"
  ;;                                :weight 'normal)))


  (setq face-font-family-alternatives '(("Cascadia Code PL" "Inconsolata")
                                       ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L")
                                       ("Sans Serif" "Johnston ITC Std" "Effra")
                                       ))
#+END_SRC

** Byte Compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tangle-init ()
    "If the current buffer is an org file in the user directory the code-blocks are
  tangled, and the tangled file is compiled."
    (when (and
           (or
            (equal (file-name-directory (buffer-file-name))
                   (expand-file-name user-emacs-directory))
            (and
             (boundp 'user-private-directory)
             (equal (file-name-directory (buffer-file-name))
                    (expand-file-name user-private-directory))))
           (file-exists-p (buffer-file-name))
           (string= "org" (file-name-extension (buffer-file-name))))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil)
            (org-file-to-compile (expand-file-name (buffer-file-name))))
        (org-babel-tangle)
        (byte-compile-file (expand-file-name (concat (file-name-sans-extension org-file-to-compile) ".el"))))))

  (add-hook 'after-save-hook #'tangle-init)
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package atom-dark-theme)
  ;; (load-theme 'atom-dark t)

  ;; (use-package nano-theme
  ;;   :straight
  ;;   (nano-theme :type git
  ;;               :repo "https://github.com/rougier/nano-theme"))
  ;; (nano-dark)

  (setq zenburn-use-variable-pitch nil
        zenburn-scale-org-headlines t
        zenburn-scale-outline-headlines t
        zenburn-override-colors-alist
        '(("zenburn-bg-1"     . "#1B1B1B")
          ("zenburn-bg-08"    . "#202020")
          ("zenburn-bg-05"    . "#282828")
          ("zenburn-bg"       . "#2F2F2F")))

  (use-package zenburn-theme)
  (load-theme 'zenburn t)

  ;; (modify-frame-parameters nil '((wait-for-wm . nil)))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  ;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC
