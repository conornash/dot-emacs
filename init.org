#+LAST_MOBILE_CHANGE: 2013-02-23 12:26:49
#+TITLE: Conor's Dot Emacs
#+COLUMNS: %50ITEM(Task) %13CLOCKSUM(Clocked Total) %8Effort(Estimate){:} %13CLOCKSUM_T(Clocked Today) %18DEADLINE
#+STARTUP: hidestars indent
#+PROPERTY: Effort_ALL 0 0:05 0:15 0:30 1:00 2:00 5:00 10:00 20:00
#+PROPERTY: ORDERED t
#+SEQ_TODO: NEXTACTION(@) | DONE(@) TRANSFERRED(@) CANCELLED(@)
#+PRIORITIES: A E A
#+DRAWERS: PROPERTIES ARCHIVE
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=blue, urlcolor=blue}
#+STARTUP: hidestars
#+SETUPFILE: theme-readtheorg.setup


* Setup system
** Initial requirements
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gc-cons-percentage 0.8
        gc-cons-threshold (* 500 (* 1024 1024)))

  (defvar doom--file-name-handler-alist file-name-handler-alist)
  (setq apropos-do-all t
        delete-active-region 'kill
        enable-recursive-minibuffers t
        file-name-handler-alist nil
        inhibit-startup-screen t
        load-prefer-newer t
        mac-command-modifier 'control
        mac-control-modifier 'super
        mac-option-modifier 'meta
        mac-pass-command-to-system nil
        max-lisp-eval-depth 60000
        max-specpdl-size 13000
        package--init-file-ensured t
        package-enable-at-startup nil
        ring-bell-function 'ignore
        save-interprogram-paste-before-kill t
        use-package-always-ensure t
        use-package-verbose t)

  ;;(setq debug-on-error t)
  (package-initialize nil)
  ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t) ;; Goes down often
  (add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/") t)
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
  (package-refresh-contents)

  (mapc (lambda (elem)
            (unless (package-installed-p elem)
             (package-install elem)))
          '(diminish use-package bind-key))

  (eval-when-compile
    (require 'use-package))
  (require 'files)

  (modify-frame-parameters nil '((wait-for-wm . nil)))

  (tool-bar-mode -1)
  ;; (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Don't say yes or no, just y or n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Coding system
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; Unicode coding
  (set-language-environment "UTF-8")

  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (eval-when-compile
    (defvar default-buffer-file-coding-system))
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))

  ;; Header line
  ;; (setq-default header-line-format mode-line-format)
  ;; (setq-default mode-line-format nil)

  ;; Recursive....

  ;; For further use-package calls
  (use-package bind-key)
  (use-package diminish)
#+END_SRC


** Fonts
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Requires font to be downloaded from https://www.fontsquirrel.com/fonts/inconsolata
  (set-face-attribute 'default nil
                      :family "Inconsolata"
                      :height 120
                      :weight 'normal
                      :width 'normal)

  (when (functionp 'set-fontset-font)
    (set-fontset-font "fontset-default"
                      'unicode
                      (font-spec :family "Inconsolata"
                                 :height 120
                                 :width 'normal
                                 :weight 'normal)))

  ;; unicode-fonts package
  (use-package unicode-fonts)
  (use-package persistent-soft)
  (unicode-fonts-setup)

#+END_SRC


** Environment Variables
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Pull in environment variables
  (use-package exec-path-from-shell)

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  ;; To allow Python to be in UTF-8
  (defvar universal-coding-system-env-list '("PYTHONIOENCODING")
    "List of environment variables \\[universal-coding-system-argument] should set")

  (defadvice universal-coding-system-argument (around provide-env-handler activate)
    "Augments \\[universal-coding-system-argument] so it also sets environment variables

  Naively sets all environment variables specified in
  `universal-coding-system-env-list' to the literal string
  representation of the argument `coding-system'.

  No guarantees are made that the environment variables set by this advice support
  the same coding systems as Emacs."
    (let ((process-environment (copy-alist process-environment)))
      (dolist (extra-env universal-coding-system-env-list)
        (setenv extra-env (symbol-name (ad-get-arg 0))))
      ad-do-it))

#+END_SRC


** Byte Compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tangle-init ()
    "If the current buffer is an org file in the user directory the code-blocks are
  tangled, and the tangled file is compiled."
    (when (and
           (equal (file-name-directory (buffer-file-name)) (expand-file-name user-emacs-directory))
           (file-exists-p (buffer-file-name))
           (string= "org" (file-name-extension (buffer-file-name))))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil)
            (org-file-to-compile (expand-file-name (buffer-file-name))))
        (org-babel-tangle)
        (byte-compile-file (expand-file-name (concat (file-name-sans-extension org-file-to-compile) ".el"))))))

  (add-hook 'after-save-hook #'tangle-init)
#+END_SRC


** Automatically refresh open files if changed on disk
#+BEGIN_SRC emacs-lisp :tangle yes

  (global-auto-revert-mode t)
  (setq auto-revert-interval 2
        ;; Also auto refresh dired, but be quiet about it
        global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)


 #+END_SRC


** Calendar
#+BEGIN_SRC emacs-lisp :tangle yes
(setq calendar-latitude 38.6
      calendar-longitude -90.1
      calendar-location-name "St. Louis")

 #+END_SRC


* Org Mode (full config)
#+BEGIN_SRC emacs-lisp :tangle yes
  (package-install 'org-plus-contrib)
  (use-package org
    :mode ("\\.org$" . org-mode)
    :ensure org-plus-contrib
    :pin gnu
    :diminish
    ((org-src-mode . " ℹ")
     (org-indent-mode . " ⭾"))
    :bind (("<s-tab>" . org-force-cycle-archived)
           ("<s-down>" . org-forward-element)
           ("<s-up>" . org-backward-element)
           ("<s-left>" . org-up-element)
           ("<s-right>" . org-down-element)
           ("M-<down>" . org-metadown)
           ("M-<up>" . org-metaup)
           ("C-c l" . org-store-link)
           ("C-c C-l" . org-insert-link)
           ("C-c C-x C-j" . org-clock-goto)
           ("s-!" . insert-current-timestamp-inactive)
           ("s-o" . org-open-at-point)
           ("s-O" . org-open-at-point-global))

    :config
    (setq comment-start-skip "^\\s-*#\\(?: \\|$\\)"
          org-agenda-deadline-faces '((1.0 . '(:foreground "#cd4740"))
                                      (0.9 . '(:foreground "goldenrod1"))
                                      (0.0 . default))
          org-agenda-dim-blocked-tasks 'invisible
          ;; Follow the point in the agenda buffer with the org file in the other buffer
          org-agenda-start-with-follow-mode t
          ;; don't show scheduled tasks in the TODO view of the agenda
          org-agenda-todo-ignore-scheduled nil
          org-clock-out-remove-zero-time-clocks t
          org-clock-persist 'history
          org-confirm-babel-evaluate nil
          org-deadline-warning-days 28
          ;; We don't want to see days in the clock report
          org-duration-format '((special . h:mm))
          org-enforce-todo-dependencies t
          org-fontify-whole-heading-line t
          org-hide-emphasis-markers t
          org-list-allow-alphabetical t
          org-log-done t
          ;; Timestamp of changes to deadline using C-c C-d/C-s
          org-log-redeadline 'time
          org-log-reschedule 'time
          org-outline-path-complete-in-steps nil
          org-refile-targets '((org-agenda-files . (:maxlevel . 2))
                               (org-agenda-files . (:todo . "NEXTACTION"))
                               (nil . (:maxlevel . 2)))
          org-refile-use-outline-path 'file
          ;; In Sparse Trees, show the details below the matching entries
          org-src-window-setup 'current-window
          org-src-fontify-natively t
          org-show-entry-below t
          org-speed-commands-user '(("S" . widen) ("d" . org-deadline))
          org-table-last-column-widths '(95 7 5)
          org-use-property-inheritance t
          org-use-speed-commands t
          ))


  (org-babel-load-file (expand-file-name "emacs24.orgmode.org" user-emacs-directory))
#+END_SRC


* Helm
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-file (expand-file-name "emacs24.helm.org" user-emacs-directory))

 #+END_SRC


* Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes

(org-babel-load-file (expand-file-name "emacs24.smartparens.org" user-emacs-directory))

 #+END_SRC


* Smartscan
 #+BEGIN_SRC emacs-lisp :tangle yes
(use-package smartscan)
#+END_SRC


* Python
 #+BEGIN_SRC emacs-lisp :tangle yes

   (org-babel-load-file (expand-file-name "emacs24.python.org" user-emacs-directory))
#+END_SRC


* Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :bind (("s-[" . flycheck-previous-error)
           ("s-]" . flycheck-next-error)))
  (use-package flycheck-mypy
    :config
    (setq flycheck-python-mypy-args "--ignore-missing-imports"))


#+END_SRC


* Rainbow Delimiters
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :diminish rainbow-delimiters-mode
    :commands (rainbow-delimiters-mode rainbow-delimiters-mode-enable
                                       rainbow-delimiters-mode-disable)
    :config
    (face-spec-set 'rainbow-delimiters-depth-1-face
                   '((t :foreground "Gray79")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-2-face
                   '((t :foreground "#e1ffe1")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-3-face
                   '((t :foreground "#ffdfbf")) 'face-defface-spec)
    (face-spec-set 'rainbow-delimiters-depth-4-face
                   '((t :foreground "#efefff")) 'face-defface-spec))

#+END_SRC


* Other Packages

** Auto-compile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-compile
    :config
    (auto-compile-on-load-mode 1)
    (auto-compile-on-save-mode 1))

 #+END_SRC


** Auto-revert
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package autorevert :ensure nil
    :diminish (auto-revert-mode . " ⎌"))
#+END_SRC


** Backup each save
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun backup-each-save-filter (filename)
    (let ((ignored-filenames
           '("^/tmp" "semantic.cache$" "\\sv$"  "\\.emacs-places$" "\\.gpg$"
             "\\.recentf$" ".newsrc\\(\\.eld\\)?"))
          (matched-ignored-filename nil))
      (mapc
       (lambda (x)
         (when (string-match x filename)
           (setq matched-ignored-filename t)))
       ignored-filenames)
      (not matched-ignored-filename)))

  (use-package backup-each-save
    :config
    (setq backup-each-save-remote-files t
          backup-each-save-filter-function 'backup-each-save-filter
          backup-directory-alist `(("." . ,(expand-file-name "emacs-backups" user-emacs-directory)))
          backup-by-copying t
          delete-old-versions t
          kept-new-versions 25
          kept-old-versions 1
          vc-make-backup-files t
          version-control t))

 #+END_SRC


** Browse at remote
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package browse-at-remote
    :bind (("s-b" . browse-at-remote)))

 #+END_SRC


** Column Number Mode
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; column-number-mode
  (column-number-mode t)

#+END_SRC


** Comint
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package comint :ensure nil)

 #+END_SRC


** Company-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :bind (("\M-\t" . company-complete))
    :diminish (company-mode . " 🕴")
    :config
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
 #+END_SRC


** CSV Mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package csv-mode
    :mode "\\.csv\\'" "\\.psv\\'" "\\.tsv\\'"
    :config
    (setq csv-separators '("," "\t" "|")))

  (add-hook 'csv-mode-hook
            '(lambda ()
               (setq-local isearch-lazy-highlight nil)
               (hl-line-mode 1)))
#+END_SRC


** cua-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (cua-mode t)
  (setq cua-enable-cua-keys nil)
  (setq cua-delete-selection nil)
  (setq delete-active-region nil)
  (delete-selection-mode -1)

 #+END_SRC


** Dired
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ls-lisp :ensure nil)

  (use-package dired
    :ensure nil
    :bind (("C-x C-j" . dired-jump)
           ("C-x M-f" . find-name-dired))

    :config
    (setq ls-lisp-use-insert-directory-program nil
          dired-listing-switches "-alh")

    (add-hook 'dired-mode-hook
              #'(lambda ()
                  (hl-line-mode 1)))

    (defun dired-open-file ()
      "In dired, open the file named on this line."
      (interactive)
      (let* ((file (dired-get-filename nil t)))
        (message "Opening %s..." file)
        (async-shell-command (format "open %s" file))    
        (message "Opening %s done" file)))

    (defun dired-back-to-top ()
      (interactive)
      (goto-char (point-min))
      (dired-next-line 4))

    (defun dired-jump-to-bottom ()
      (interactive)
      (goto-char (point-max))
      (dired-next-line -1))

    (define-key dired-mode-map (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
    (define-key dired-mode-map (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
    (define-key dired-mode-map (kbd "s-o") 'dired-open-file)

    )
 #+END_SRC


** Direnv
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; direnv
  (org-babel-load-file (expand-file-name "emacs24.direnv.org" user-emacs-directory))
#+END_SRC


** Docker
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package docker
    :bind (("<C-f7>" . docker-containers)
           ("<M-f7>" . docker-images)))
  (use-package docker-tramp)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+END_SRC


** Dockerfile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dockerfile-mode)

  (add-hook 'dockerfile-mode-hook
            #'(lambda ()
                (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                ))

 #+END_SRC


** Edebug
#+BEGIN_SRC emacs-lisp :tangle yes
(setq edebug-trace t
      edebug-save-windows nil)

 #+END_SRC


** Ediff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ediff
    :ensure nil
    :bind (("<C-f11>" . ediff)
           ("<M-f11>" . ediff-buffers)
           ("<f11>" . ediff-show-registry))

    :config
    (defun ediff-copy-both-to-C ()
      (interactive)
      (ediff-copy-diff ediff-current-difference nil 'C nil
                       (concat
                        (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                        (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
    (defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
    (add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)

    (setq ediff-split-window-function 'split-window-horizontally
          ediff-window-setup-function 'ediff-setup-windows-plain))


 #+END_SRC


** emojify
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emojify)
  (global-emojify-mode -1)

 #+END_SRC


** Enable case-region
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(global-set-key (kbd "M-c") 'capitalize-word)
(global-set-key (kbd "M-l") 'downcase-word)
(global-set-key (kbd "M-u") 'upcase-word)
 #+END_SRC


** Enable narrowing
#+BEGIN_SRC emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)

 #+END_SRC


** Encryption
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; EasyPG
  (use-package epa-file :ensure nil)
  (epa-file-enable)

 #+END_SRC


** ESS / R
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-if-exists (expand-file-name "emacs24.ess.org" user-emacs-directory))
 #+END_SRC


** Expand region
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package expand-region
    :bind (("M-#" . er/expand-region)
           ("C-M-#" . er/contract-region))
    :config
    ;; Remove er/mark-word
    (setq er/try-expand-list '(er/mark-symbol
                               er/mark-symbol-with-prefix er/mark-next-accessor
                               er/mark-method-call er/mark-inside-quotes
                               er/mark-outside-quotes er/mark-inside-pairs
                               er/mark-outside-pairs er/mark-comment er/mark-url er/mark-email
                               er/mark-defun)))
 #+END_SRC


** FontAwesome
#+BEGIN_SRC emacs-lisp :tangle yes
 
  ;; Requires font to be downloaded from http://fontawesome.io/
  (use-package fontawesome)

#+END_SRC


** Find file at point
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs"
        save-abbrevs nil
        hippie-expand-try-functions-list
        '(try-expand-dabbrev-all-buffers
          try-complete-file-name
          try-complete-file-name-partially
          try-complete-lisp-symbol
          try-complete-lisp-symbol-partially
          try-expand-all-abbrevs
          try-expand-dabbrev
          try-expand-dabbrev-from-kill
          try-expand-dabbrev-visible
          try-expand-line
          try-expand-list
          yas-hippie-try-expand))

 #+END_SRC


** Guide-key
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package guide-key
    :diminish guide-key-mode
    :config
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v" "C-x j" "<C-f1>" "C-;" "C-c" "<f2>")
          guide-key/idle-delay 0.5
          guide-key/recursive-key-sequence-flag t))
  (guide-key-mode 1)


#+END_SRC


** Help-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'help-mode-hook #'(lambda()
                              (define-key help-mode-map (kbd "b") 'help-go-back)
                              (define-key help-mode-map (kbd "f") 'help-go-forward)))

 #+END_SRC


** Helpful package
This is a system that makes `helm-apropos` more useful
#+BEGIN_SRC emacs-lisp :tangle yes :eval never
  (use-package helpful
    :commands (helpful-function helpful-variable)
    :bind (("C-h k" . helpful-key)))

#+END_SRC


** hungry-delete
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :diminish (hungry-delete-mode . " 𐑙")
    :config
    (setq hungry-delete-chars-to-skip " \t\f\v")
    (defalias 'delete-backward-char 'hungry-delete-backward "To delete a single character provide a numeric prefix.")
    (defalias 'delete-forward-char 'hungry-delete-forward "To delete a single character provide a numeric prefix."))
  (global-hungry-delete-mode 1)
 #+END_SRC


** Hy
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package hy-mode)
  (add-hook 'hy-mode-hook
            #'(lambda ()
                (pyenv-mode 1)
                (rainbow-mode 1)
                (smartparens-mode 1)
                (turn-on-smartparens-strict-mode)
                (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                (setq tab-width 4
                      ;; jedi:complete-on-dot t              ; optional
                      ;; flycheck-checker 'python-flake8
                      jit-lock-defer-time 0.25)
                (define-key hy-mode-map (kbd "M-\\") 'switch-to-lisp)
                ))

  (eval-when-compile
    (defvar inferior-lisp-mode-map))
  (add-hook 'inferior-lisp-mode-hook
            #'(lambda ()
                (define-key inferior-lisp-mode-map (kbd "C-M-p") 'backward-list)
                (define-key inferior-lisp-mode-map (kbd "C-M-n") 'forward-list)))

#+END_SRC


** iBuffer
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ibuffer
    :ensure nil
    :bind (("<f8>" . ibuffer) ("C-x C-b" . ibuffer)))

 #+END_SRC


** isearch
#+BEGIN_SRC emacs-lisp :tangle yes
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))

(define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
(define-key isearch-mode-map (kbd "<backspace>") 'conor-mydelete)
(define-key isearch-mode-map (kbd "M-o") 'helm-swoop-from-isearch)
(define-key isearch-mode-map (kbd "s-o") 'helm-swoop-from-isearch)
(define-key isearch-mode-map (kbd "C-<return>") 'isearch-exit-other-end)

 #+END_SRC


** js2 stuff
#+BEGIN_SRC emacs-lisp :tangle yes
;; (org-babel-load-if-exists (expand-file-name "emacs24.js2.org" user-emacs-directory))

 #+END_SRC


** JSON
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package json-mode
    :mode "\\.json\\'"
    :config
    (setq json-reformat:indent-width 2))

  (add-hook 'json-mode-hook
            #'(lambda ()
                (smartparens-strict-mode 1)
                (define-key json-mode-map (kbd "C-M-\\") 'json-pretty-print)))
 #+END_SRC


** Key Chord
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define-global "HH" 'helm-apropos)
  (key-chord-define-global "hh" 'helm-M-x)
  (key-chord-define-global "JJ" 'org-agenda)
  (key-chord-define-global "jj" 'conor-helm-files))


#+END_SRC


** Keyfreq
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package keyfreq
  :config
  (setq keyfreq-excluded-commands
        '(self-insert-command
          keyboard-quit
          abort-recursive-edit
          )
        keyfreq-file (expand-file-name "keyfreq" user-emacs-directory))
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))


#+END_SRC


** Keychain
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package keychain-environment)
  (keychain-refresh-environment)


#+END_SRC


** kill ring
#+BEGIN_SRC emacs-lisp :tangle yes
(setq kill-ring-max 200)

 #+END_SRC


** Line numbers
#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package nlinum
    :commands (global-nlinum-mode nlinum-mode)
    :config
    (setq line-number-display-limit-width 9000000))
#+END_SRC


** Magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :commands magit-status
    :bind (("<f6>" . magit-status))
    :config
    (add-hook 'with-editor-mode-hook
              '(lambda ()
                 (orgalist-mode 1)))
    (setq magit-push-always-verify nil
          magit-diff-use-overlays nil
          magit-revision-headers-format "Author:     %aN <%aE>
  AuthorDate: %ad
  Commit:     %cN <%cE>
  CommitDate: %cd
  Signature:  %GG
  "
          magit-status-sections-hook '(magit-insert-status-headers
                                       magit-insert-merge-log
                                       magit-insert-rebase-sequence
                                       magit-insert-am-sequence
                                       magit-insert-sequencer-sequence
                                       magit-insert-bisect-output
                                       magit-insert-bisect-rest
                                       magit-insert-bisect-log
                                       magit-insert-untracked-files
                                       magit-insert-unstaged-changes
                                       magit-insert-staged-changes
                                       magit-insert-stashes
                                       magit-insert-unpulled-from-upstream
                                       magit-insert-unpulled-from-pushremote
                                       magit-insert-unpushed-to-upstream
                                       magit-insert-unpushed-to-pushremote)))

 #+END_SRC


** manage-minor-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package manage-minor-mode)

 #+END_SRC


** Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package markdown-mode
    :mode "\\.md\\'")

 #+END_SRC


** Multiple cursors
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package multiple-cursors
    :bind (("C-M-@" . mc/mark-previous-like-this)
           ("M-@" . mc/mark-next-like-this)
           ("s-a" . mc/edit-beginnings-of-lines)
           ("s-c" . mc/add-multiple-cursors-to-region-lines)
           ("s-e" . mc/edit-ends-of-lines))

    :config
    (setq mc/list-file (expand-file-name "emacs24.mc.el" user-emacs-directory)
          mc/cmds-to-run-for-all
          '(
            backward-sexp
            beginning-of-visual-line
            cua-copy-region
            cua-cut-region
            cua-exchange-point-and-mark
            cua-paste
            djcb-duplicate-line
            downcase-region
            electric-newline-and-maybe-indent
            end-of-buffer
            end-of-visual-line
            ess-smart-S-assign
            ess-smart-comma
            ess-yank
            forward-sexp
            hungry-delete-backward
            hungry-delete-forward
            iregister-copy-to-register-kill
            iregister-point-or-text-to-register-kill-ring-save
            jedi:dot-complete
            kill-region
            kill-sexp
            kill-visual-line
            move-text-down
            move-text-up
            my-python-eval-line
            org-beginning-of-line
            org-delete-char
            org-end-of-line
            org-force-self-insert
            org-self-insert-command
            paredit-backward
            paredit-backward-kill-word
            paredit-close-round
            paredit-doublequote
            paredit-forward
            paredit-forward-delete
            paredit-forward-kill-word
            paredit-forward-slurp-sexp
            paredit-join-sexps
            paredit-kill
            paredit-newline
            paredit-open-round
            paredit-open-square
            paredit-semicolon
            paredit-splice-sexp
            paredit-wrap-round
            python-indent-dedent-line-backspace
            python-indent-electric-colon
            sp--self-insert-command
            sp-backward-delete-char
            sp-backward-kill-word
            sp-backward-sexp
            sp-delete-char
            sp-down-sexp
            sp-forward-sexp
            sp-forward-slurp-sexp
            sp-kill-hybrid-sexp
            sp-kill-sexp
            sp-kill-word
            sp-remove-active-pair-overlay
            sp-splice-sexp
            sp-up-sexp
            transpose-words
            yas-expand
            )))

 #+END_SRC


** Paradox Package Manager
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paradox
    :commands paradox-list-packages
    :init
    (setq paradox-automatically-star t
          paradox-column-width-package 25
          ;; Auth token in private.org
          paradox-execute-asynchronously t))

 #+END_SRC


** Prettify
#+BEGIN_SRC emacs-lisp :tangle yes

  (global-prettify-symbols-mode 1)
  (setq prettify-symbols-unprettify-at-point 'right-edge)

 #+END_SRC


** rainbow-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-mode
    :diminish (rainbow-mode . " 🌈"))
 #+END_SRC


** RealGUD
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package realgud
    :commands (realgud:cmd-eval
    realgud:zshdb-customize realgud:ipdb-remote realgud:terminate
    realgud:window-bt-undisturb-src realgud:cmd-break
    realgud:trepan-goto-syntax-error-line realgud:cmd-delete
    realgud:unload-features realgud:remake realgud:rdebug-customize
    realgud:cmd-frame realgud:trepanjs-reset
    realgud:trepan-goto-control-frame-line realgud:trepan2-customize
    realgud:cmd-newer-frame realgud:gdb-reset
    realgud:trepanjs-goto-syntax-error-line realgud:reload-features
    realgud:cmd-enable realgud:send-input realgud:bashdb-customize
    realgud:cmd-until realgud:cmd-terminate
    realgud:perl-goto-errmsg-line realgud:backtrace-init
    realgud:goto-loc-hist-9 realgud:goto-loc-hist-8
    realgud:goto-loc-hist-7 realgud:goto-loc-hist-6
    realgud:goto-loc-hist-5 realgud:goto-loc-hist-4
    realgud:cmd-eval-dwim realgud:gub-customize realgud:pdb
    realgud:nodejs-customize realgud:ipdb-customize realgud:cmd-next
    realgud:jdb realgud:nodejs-reset realgud:cmd-continue
    realgud:pdb-customize realgud:jdb-goto-control-frame-line
    realgud:ipdb-backend-complete realgud:backtrace-describe
    realgud:trepan3k-delayed realgud:jdb-goto-syntax-error-line
    realgud:trepanjs realgud:follow-event realgud:cmd-step
    realgud:cmd-repeat-last realgud:zshdb realgud:ipdb
    realgud:track-set-debugger realgud:pdb-remote
    realgud:cmd-eval-region realgud:reset realgud:loc-describe
    realgud:track-from-region realgud:kshdb-customize
    realgud:trepanpl-track-mode realgud:cmd-jump
    realgud:gub-goto-location realgud:goto-lang-backtrace-line
    realgud:cmd-next-no-arg realgud:follow-point
    realgud:perldb-customize realgud:pdb-delayed
    realgud:rspec-goto-backtrace-line realgud:flake8-goto-msg-line
    realgud:gdb-pid realgud:goto-debugger-backtrace-line
    realgud:cmd-finish realgud:ruby-goto-dollar-bang-line
    realgud:info-mode realgud:pytest-goto-errmsg-line realgud:cmd-quit
    realgud:trepan realgud:remake-customize realgud:trepan\.pl
    realgud:window-bt realgud:jdb-track-mode
    realgud:srcbuf-info-describe realgud:ruby-goto-backtrace-line
    realgud:goto-maven-errmsg-line realgud:bashdb
    realgud:track-mode-enable realgud:remove-ansi-schmutz
    realgud:cmdbuf-follow-buffer realgud:rails-goto-backtrace-line
    realgud:perldb realgud:follow realgud:cmd-shell
    realgud:rubinius-goto-Xagent-backtrace-line
    realgud:trepanpl-goto-syntax-error-line realgud:gdb-pid-associate
    realgud:cmd-backtrace realgud:track-mode-disable realgud:gdb
    realgud:trepanpl-reset realgud:tooltip-eval realgud:gdb-customize
    realgud:cmd-disable realgud:cmdbuf-info-describe
    realgud:trepan2-delayed realgud:gub-goto-panic-location
    realgud:cmd-restart realgud:goto-debugger-loc-line
    realgud:trepanpl-customize realgud:cmd-kill
    realgud:terminate-srcbuf realgud:trepan2 realgud:gdb-track-mode
    realgud:rdebug realgud:cmd-older-frame realgud:trepan3k
    realgud:cmd-clear realgud:nodejs realgud:cmd-step-no-arg
    realgud:jdb-customize realgud:trepan3k-customize
    realgud:trepanjs-customize realgud:trepan-customize realgud:kshdb
    realgud:perldb-reset)
    :config
    (setq realgud:ipdb-command-name "python -m ipdb"))

 #+END_SRC


** Recentf
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package recentf
  :config
  (setq recentf-max-saved-items nil))

(require 'prog-mode)
 #+END_SRC


** Restclient
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package restclient
    :mode ("\\.http\\'" . restclient-mode)
    :config
    (use-package restclient-helm))

  (add-hook 'restclient-mode-hook
            '(lambda ()
               (smartparens-mode 1)))


 #+END_SRC


** Scheme
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.scheme.org" user-emacs-directory))

#+END_SRC


** Shell
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'sh-mode-hook
            #'(lambda()
               (define-key sh-mode-map (kbd "C-\\") 'shell-eval-line)))

  (defun term-toggle-mode ()
    (interactive)
    (if (term-in-line-mode)
        (term-char-mode)
      (term-line-mode)))

  (use-package term
    :commands (term)
    :ensure nil
    :config
    (setq explicit-shell-file-name "/usr/local/bin/bash"))
 #+END_SRC


** Show-paren
#+BEGIN_SRC emacs-lisp :tangle yes
(show-paren-mode 1)
#+END_SRC


** Smalltalk
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package shampoo
    :commands (shampoo-connect shampoo-reconnect shampoo-disconnect)
    :mode ( "\\.st\\'" . shampoo-code-mode))

  (add-hook 'shampoo-code-mode-hook
              '(lambda ()
                 (rainbow-mode 1)
                 (smartparens-mode 1)))

 #+END_SRC


** SQL
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.sql.org" user-emacs-directory))

 #+END_SRC


** SSH mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ssh-config-mode)
  (add-to-list 'auto-mode-alist '(".ssh/config\\'"       . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("sshd?_config\\'"      . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("known_hosts\\'"       . ssh-known-hosts-mode))
  (add-to-list 'auto-mode-alist '("authorized_keys2?\\'" . ssh-authorized-keys-mode))
  (add-hook 'ssh-config-mode-hook 'turn-on-font-lock)
  (add-hook 'ssh-config-mode-hook 'delete-trailing-whitespace)

 #+END_SRC


** Subword mode
#+BEGIN_SRC emacs-lisp :tangle yes

(setq subword-forward-regexp "\\W*\\(\\([[:upper:]]*\\(\\W\\)?\\)[[:lower:][:digit:]]*[_.-]*\\)"
      subword-backward-regexp "\\(\\(\\W\\|[[:lower:][:digit:]]\\)\\([[:upper:]]+\\W*\\)\\|\\W\\w+\\)")


 #+END_SRC


** Tabs defaults
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq default-tab-width 4
        tab-width 4)

  (setq-default indent-tabs-mode nil
                tab-width 4)

 #+END_SRC


** Tramp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tramp
    :config
    (setq tramp-default-method "ssh"
          tramp-copy-size-limit -1
          tramp-use-ssh-controlmaster-options t
          tramp-ssh-controlmaster-options
          (concat
           "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p "
           "-o ControlMaster=auto -o ControlPersist=yes"))
  ;; allow sudo access to hosts
  ;; (add-to-list 'tramp-default-proxies-alist '(".*" "\\`root\\'" "/ssh:%h:"))
  ;; It's just too long to type
    (defalias 'tcac 'tramp-cleanup-all-connections))

 #+END_SRC


** Undo Tree
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
    :bind (("C-/" . undo-tree-undo)
           ("C-?" . undo-tree-redo))
    :diminish
    (undo-tree-mode . " ")
    :config
    (global-undo-tree-mode 1))

 #+END_SRC


** Uniquify
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package uniquify
    :ensure nil
    :config
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets))

 #+END_SRC


** VC settings
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package vc
  :config
  (setq vc-follow-symlinks t))

 #+END_SRC


** Visual line mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package simple
    :ensure nil
    :diminish
    (visual-line-mode . " "))

 #+END_SRC


** visual-regexp
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package visual-regexp
      :bind (("s-:" . query-replace-regexp)
             ("s-;" . vr/replace)))
 #+END_SRC


** w3m
#+BEGIN_SRC emacs-lisp :tangle yes
;;(setq browse-url-browser-function 'w3m-browse-url)
(setq browse-url-browser-function 'browse-url-default-macosx-browser)

 #+END_SRC


** web-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package web-mode
    :mode "\\.html\\'" "\\.php\\'" "\\.tpl\\'" "\\.mustache\\'" "\\.erb\\'" "\\.jinja\\'" "\\.jinja2\\'" "\\.twig\\'"
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-engine-detection t
          ;; ( web-mode-indent-style 2)
          web-mode-style-padding 1
          web-mode-script-padding 1
          web-mode-block-padding 0))

  (add-hook 'web-mode-hook
            '(lambda ()
               (rainbow-mode 1)
               (smartparens-mode 1)))
 #+END_SRC


** Buffer/Window/Frame navigation
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq split-height-threshold 140
        split-width-threshold 140)

  (use-package buffer-move
    :bind (("<C-s-down>" . buf-move-down)
           ("<C-s-left>" . buf-move-left)
           ("<C-s-right>" . buf-move-right)
           ("<C-s-up>" . buf-move-up)))

  (use-package window-number)
  (window-number-meta-mode 1)

  (defun back-window (&optional arg)
    (interactive "P")
    (other-window -1))

  (defun my/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
        (switch-to-next-buffer)))

  (defun my/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))

  (global-set-key (kbd "C-\]") 'other-window)
  (global-set-key (kbd "C-M-\]") 'back-window)

  (global-set-key (kbd "s-2") 'my/vsplit-last-buffer)
  (global-set-key (kbd "s-3") 'my/hsplit-last-buffer)

  (use-package transpose-frame
    :bind (("C-<" . rotate-frame-anticlockwise)
           ("C->" . rotate-frame-clockwise)))

  (global-set-key (kbd "<M-f8>") 'kill-buffer-and-window)
  (global-set-key (kbd "C-`") 'other-frame)
  (global-set-key (kbd "C-s-]") 'other-frame)
  (global-set-key (kbd "s-0") 'delete-window)
  (global-set-key (kbd "s-1") 'delete-other-windows)
  (global-set-key (kbd "s-\\") 'other-frame)


#+END_SRC


** Man pages
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package woman
    :commands (helm-man-woman))

  (add-hook 'woman-mode-hook
            '(lambda ()
               (subword-mode -1)))
#+END_SRC


** YAML
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yaml-mode
    :mode "\\.lookml\\'" "\\.yaml.template\\'" "\\.yaml\\'" "\\.yml\\'")

 #+END_SRC


** yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish
    ((yas-minor-mode . " ✀")
     (yas-global-mode . " ✀"))
    :bind (("C-z" . yas-expand))
    :config
    (add-to-list 'yas-snippet-dirs (expand-file-name "snippets" user-emacs-directory)))
  (yas-global-mode 1)

 #+END_SRC


** Whitespace mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package whitespace
    :bind (("C-c w" . whitespace-mode))
    :config
    (setq whitespace-display-mappings
          ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
          '(
            (space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
            (newline-mark 10 [182 10]) ; 10 LINE FEED
            (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
            )
          whitespace-style '(face tabs spaces trailing space-before-tab::space newline indentation::space indentation indentation::tab empty space-after-tab::space space-mark tab-mark newline-mark)))

 #+END_SRC


* Gnus
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gnus-directory (expand-file-name "gnus" user-emacs-directory)
        gnus-startup-file (expand-file-name "newsrc.el" gnus-directory)
        gnus-select-method '(nntp "nntp.aioe.org")
        gnus-server-alist '(("archive" nnfolder "archive"
                             (nnfolder-directory (expand-file-name "nnfolder/archive" gnus-directory))
                             (nnfolder-active-file (expand-file-name "nnfolder/archive/active" gnus-directory))
                             (nnfolder-get-new-mail nil)
                             (nnfolder-inhibit-expiry t))))

  ;; Fix for security vulnerability https://lists.gnu.org/archive/html/info-gnu/2017-09/msg00006.html
  (eval-after-load "enriched"
    '(defun enriched-decode-display-prop (start end &optional param)
       (list start end)))

#+END_SRC


* Elisp functions
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Emacs Lisp
  (org-babel-load-if-exists (expand-file-name "emacs24.elisp.org" user-emacs-directory))

  ;; Hacky functions
  (org-babel-load-if-exists (expand-file-name "emacs24.hacky.org" user-emacs-directory))

#+END_SRC


* Eshell
#+BEGIN_SRC emacs-lisp :tangle yes
(org-babel-load-if-exists (expand-file-name "emacs24.eshell.org" user-emacs-directory))

 #+END_SRC


* Keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-load-if-exists (expand-file-name "emacs24.keybindings.org" user-emacs-directory))

 #+END_SRC


* Scratch buffer
#+BEGIN_SRC emacs-lisp :tangle yes

  ;; (defun scratch-fortune (file)
  ;;   (fortune-in-buffer t file)
  ;;   (save-current-buffer
  ;;     (set-buffer fortune-buffer-name)
  ;;     (s-concat
  ;;      (replace-regexp-in-string "^[A-Za-z(\"-]" ";; " (buffer-string))
  ;;      "\n\n")))

  ;; (use-package fortune
  ;;   :config
  ;;   (setq fortune-dir "/Users/conornash/Dropbox/Settings/fortunes"
  ;;         initial-scratch-message (scratch-fortune "/Users/conornash/Dropbox/Settings/fortunes/quotes.fortune")))

#+END_SRC


* End of Config

** Back to usual parameters
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gc-cons-percentage 0.2
        gc-cons-threshold 800000)

  (setq file-name-handler-alist doom--file-name-handler-alist
        ;; In case another package turns this on
        auto-window-vscroll nil)
#+END_SRC


** Declare functions for the byte-compiler
Doesn't seem to work correctly yet
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-when-compile
    (mapc
     (lambda (elem) (declare-function elem (find-lisp-object-file-name elem 'defun)))
     '(auto-compile-on-load-mode
       auto-compile-on-save-mode
       exec-path-from-shell-initialize
       global-emojify-mode
       global-hungry-delete-mode
       global-undo-tree-mode
       guide-key-mode
       key-chord-define-global
       key-chord-mode
       keyfreq-autosave-mode
       keyfreq-mode
       org-babel-load-file
       unicode-fonts-setup
       window-number-meta-mode
       yas-global-mode
       )))
#+END_SRC


** Private settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (file-exists-p (expand-file-name "private.org" user-emacs-directory))
    (org-babel-load-if-exists (expand-file-name "private.org" user-emacs-directory)))


#+END_SRC


** Customize
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (cond
   ((file-exists-p custom-file)
    (load custom-file))
   (t
    (write-region "" nil custom-file)))
#+END_SRC


** Activate global modes that aren't required during startup
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package atom-dark-theme)
  (load-theme 'atom-dark t)
  (helm-mode 1)
#+END_SRC
