
* Helper functions
  #+BEGIN_SRC emacs-lisp :tangle yes

    (defun sql-connect-preset (name)
      "Connect to a predefined SQL connection listed in `sql-connection-alist'"
      (eval `(let ,(cdr (assoc name sql-connection-alist))
               (cl-flet ((sql-get-login (&rest what)))
                 (sql-product-interactive sql-product)))))

    (defun sqlup-buffer ()
      "Appropriately upcase all SQL commands in the buffer"
      (interactive)
      (save-excursion
        (let ((start (point-min))
              (end (point-max)))
          (sqlup-capitalize-keywords-in-region start end))))

    (defun conor-sql-send-paragraph ()
      "Send SQL paragraph to SQLi buffer, plus some convenience"
      (interactive)
      (save-selected-window
        (unless (sql-find-sqli-buffer)
          (let ((connection (if sql-connection-alist
                                (sql-read-connection "Connection: " nil '(nil))
                              (user-error "No SQL Connections defined"))))
            (sql-connect connection)))
        (unless sql-buffer
          (sql-set-sqli-buffer))
        (sql-send-paragraph)))

  #+END_SRC

* SQL
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package sql-indent)
    (use-package sqlup-mode
      :diminish (sqlup-mode . " ðŸ¡…"))

    (use-package sqlformat
      :config
      (setq sqlformat-command 'pgformatter
            sqlformat-args '("--comma-break"
                             "--comma-start"
                             "--function-case=2"
                             "--keep-newline"
                             "--keyword-case=2"
                             "--nogrouping"
                             "--no-space-function"
                             "--numbering"
                             "--redshift"
                             "--spaces=2"
                             "--type-case=2")))

    ;; (defun conornash/sqlformat-sqlformat (beg end)
    ;;   (interactive
    ;;    (if (use-region-p)
    ;;        (list (region-beginning) (region-end))
    ;;      (list (point-min) (point-max))))
    ;;   (setq sqlformat-command 'sqlformat
    ;;         sqlformat-args '("--comma_first=True"
    ;;                          "--use_space_around_operators"
    ;;                          ;; "--reindent_aligned"
    ;;                          "--identifiers=lower"
    ;;                          "--keywords=upper"))
    ;;   (sqlformat-region beg end (called-interactively-p 'any)))


    (defun conornash/sqlformat-sqlfmt (beg end)
      (interactive
       (if (use-region-p)
           (list (region-beginning) (region-end))
         (list (point-min) (point-max))))
      (setq sqlformat-command 'sqlfmt
            sqlformat-args '(
                             "--use-spaces"
                             ))
      (sqlformat-region beg end (called-interactively-p 'any)))

    (defun conornash/sqlformat-sqlfluff (beg end)
      (interactive
       (if (use-region-p)
           (list (region-beginning) (region-end))
         (list (point-min) (point-max))))
      (setq sqlformat-command 'sqlfluff
            sqlformat-args '("--ignore-local-config"
                             "--config=/Users/conornash/dotfiles/.sqlfluff"))
      (sqlformat-region beg end (called-interactively-p 'any)))

    (defun conornash/sqlformat-pgformatter (beg end)
      (interactive
       (if (use-region-p)
           (list (region-beginning) (region-end))
         (list (point-min) (point-max))))
      (setq sqlformat-command 'pgformatter
            sqlformat-args '(
                             "--comma-break"
                             "--comma-start"
                             "--function-case=2"
                             "--keep-newline"
                             "--keyword-case=2"
                             "--nogrouping"
                             "--no-space-function"
                             "--redshift"
                             "--spaces=2"
                             "--type-case=2"))
      (sqlformat-region beg end (called-interactively-p 'any)))

    (use-package sql
      :mode
      (("\\.bqql\\'"   . sql-mode)
       ("\\.hql\\'"    . sql-mode)
       ("\\.mssql\\'"  . sql-mode)
       ("\\.mysql\\'"  . sql-mode)
       ("\\.psql\\'"   . sql-mode)
       ("\\.sql32\\'"  . sql-mode)
       ("\\.sql\\'"    . sql-mode)
       ("\\.ssql\\'"   . sql-mode))
      :config
      (setq sql-pop-to-buffer-after-send-region t
            sql-send-terminator t
            sql-postgres-options '("-P" "pager=off"))

      ;; Add postgrestools language server configuration
      ;; (add-to-list 'eglot-server-programs
      ;;              '(sql-mode . ("postgrestools" "lsp-proxy")))

      (add-hook 'sql-interactive-mode-hook
                #'(lambda ()
                    (visual-line-mode -1)
                    (toggle-truncate-lines t)))

      (add-hook 'sql-mode-hook
                #'(lambda ()
                    (turn-on-smartparens-strict-mode)
                    (rainbow-delimiters-mode-enable)
                    (flycheck-mode 1)
                    (smartscan-mode 1)
                    (sqlup-mode 1)
                    ;; (sqlformat-on-save-mode 1)
                    (sqlind-minor-mode 1)
                    ;; (eglot-ensure) ; Enable eglot for SQL files
                    (add-hook 'after-save-hook #'delete-trailing-whitespace nil t))))

    (use-package pg)

    (defun sqlformat-region (beg end &optional display-errors)
      "Reformats the region from BEG to END.
    When called interactively, or with prefix argument
    DISPLAY-ERRORS, shows a buffer if the formatting fails."
      (interactive "rp")
      (let ((input-file (reformatter--make-temp-file 'sqlformat)))
        (unwind-protect
            (progn
              (reformatter--do-region
               'sqlformat beg end
               (pcase sqlformat-command
                 (`sqlformat "sqlformat")
                 (`sqlfmt "sqlfmt")
                 (`pgformatter "pg_format")
                 (`sqlfluff "sqlfluff")
                 (`sql-formatter "sql-formatter"))
               (pcase sqlformat-command
                 (`sqlformat  (append sqlformat-args '("-r" "-")))
                 (`sqlfmt  (append sqlformat-args '("-")))
                 (`pgformatter (append sqlformat-args '("-")))
                 (`sqlfluff (append '("format") sqlformat-args '("-")))
                 (`sql-formatter sqlformat-args))
               t t input-file
               (if (eq sqlformat-command 'sqlfluff) (lambda (code) t) #'zerop)
               display-errors nil))
          (when (file-exists-p input-file)
            (delete-file input-file)))))

    (define-key sql-mode-map (kbd "C-M-\\") 'sqlformat-buffer)
    (define-key sql-mode-map (kbd "C-M-|") 'indent-region)

    (setq sqlformat-command 'sqlfluff      
          sqlformat-args '("--ignore-local-config"
                           "--config=/Users/conornash/dotfiles/.sqlfluff"))
  #+END_SRC
