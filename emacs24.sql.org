* Helper functions
  #+BEGIN_SRC emacs-lisp :tangle yes

    (defun sql-connect-preset (name)
      "Connect to a predefined SQL connection listed in `sql-connection-alist'"
      (eval `(let ,(cdr (assoc name sql-connection-alist))
               (cl-flet ((sql-get-login (&rest what)))
                 (sql-product-interactive sql-product)))))

    (defun sqlup-buffer ()
      "Appropriately upcase all SQL commands in the buffer"
      (interactive)
      (save-excursion
        (let ((start (point-min))
              (end (point-max)))
          (sqlup-capitalize-keywords-in-region start end))))

    (defun conor-sql-send-paragraph ()
      "Send SQL paragraph to SQLi buffer, plus some convenience"
      (interactive)
      (save-selected-window
        (unless (sql-find-sqli-buffer)
          (let ((connection (if sql-connection-alist
                                (sql-read-connection "Connection: " nil '(nil))
                              (user-error "No SQL Connections defined"))))
            (sql-connect connection)))
        (unless sql-buffer
          (sql-set-sqli-buffer))
        (sql-send-paragraph)))

  #+END_SRC

* SQL
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package sql-indent)
    (use-package sqlup-mode
      :diminish (sqlup-mode . " ðŸ¡…"))

    (use-package sqlformat
      :config
      (setq sqlformat-command 'pgformatter
            sqlformat-args '("--comma-break"
                             "--comma-start"
                             "--function-case=2"
                             "--keep-newline"
                             "--keyword-case=2"
                             "--nogrouping"
                             "--no-space-function"
                             "--numbering"
                             "--redshift"
                             "--spaces=2"
                             "--type-case=2")))

    (defun conornash/sqlformat-sqlformat ()
      (interactive)
      (setq sqlformat-command 'sqlformat
            sqlformat-args '("--comma_first=True"
                             "--use_space_around_operators"
                             ;; "--reindent_aligned"
                             "--identifiers=lower"
                             "--keywords=upper"))
        (sqlformat-buffer))

    (defun conornash/sqlformat-sqlfluff ()
      (interactive)
        (setq sqlformat-command 'sqlfluff
            sqlformat-args '("--disable_progress_bar"
                             "--nocolor"
                             "--dialect=postgres"))
        (sqlformat-buffer))

    (defun conornash/sqlformat-pgformatter ()
      (interactive)
      (setq sqlformat-command 'pgformatter
            sqlformat-args '(
                             "--comma-break"
                             "--comma-start"
                             "--function-case=2"
                             "--keep-newline"
                             "--keyword-case=2"
                             "--nogrouping"
                             "--no-space-function"
                             "--redshift"
                             "--spaces=2"
                             "--type-case=2"))
        (sqlformat-buffer))

    (use-package sql
      :mode
      (("\\.bqql\\'"   . sql-mode)
       ("\\.hql\\'"    . sql-mode)
       ("\\.mssql\\'"  . sql-mode)
       ("\\.mysql\\'"  . sql-mode)
       ("\\.psql\\'"   . sql-mode)
       ("\\.sql32\\'"  . sql-mode)
       ("\\.sql\\'"    . sql-mode)
       ("\\.ssql\\'"   . sql-mode))
      :bind
      (:map sql-mode-map
            ("C-\\" . conor-sql-send-paragraph)
            ("C-M-\\" . sqlformat-region)
            ("<C-M-tab>" . sqlformat-buffer))
      :config
      (setq sql-pop-to-buffer-after-send-region t
            sql-send-terminator t
            sql-postgres-options '("-P" "pager=off"))


      (add-hook 'sql-interactive-mode-hook
                #'(lambda ()
                    (visual-line-mode -1)
                    (toggle-truncate-lines t)))

      (add-hook 'sql-mode-hook
                #'(lambda ()
                    (turn-on-smartparens-strict-mode)
                    (add-hook 'after-save-hook #'delete-trailing-whitespace nil t)
                    (flycheck-mode 1)
                    (smartscan-mode 1)
                    (sqlup-mode 1)
                    )))
  #+END_SRC

